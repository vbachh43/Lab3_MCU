
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eac  08002eac  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002eac  08002eac  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eac  08002eac  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000048  08002efc  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002efc  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a8f  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5e  00000000  00000000  00029b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e8b  00000000  00000000  0002ca78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c219  00000000  00000000  00043903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082519  00000000  00000000  0004fb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000292c  00000000  00000000  000d2088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e60 	.word	0x08002e60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002e60 	.word	0x08002e60

0800014c <isButton1Pressed>:

int Pressed_Key_Timer = 100;
int Pressed_Key_Timer_a = 100;
int Pressed_Key_Timer_b = 100;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000064 	.word	0x20000064

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000068 	.word	0x20000068

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000006c 	.word	0x2000006c

080001b8 <getKey1Input>:

void getKey1Input(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	Key_Reg0 = Key_Reg1;
 80001bc:	4b23      	ldr	r3, [pc, #140]	; (800024c <getKey1Input+0x94>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a23      	ldr	r2, [pc, #140]	; (8000250 <getKey1Input+0x98>)
 80001c2:	6013      	str	r3, [r2, #0]
	Key_Reg1 = Key_Reg2;
 80001c4:	4b23      	ldr	r3, [pc, #140]	; (8000254 <getKey1Input+0x9c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a20      	ldr	r2, [pc, #128]	; (800024c <getKey1Input+0x94>)
 80001ca:	6013      	str	r3, [r2, #0]
	Key_Reg2 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d0:	4821      	ldr	r0, [pc, #132]	; (8000258 <getKey1Input+0xa0>)
 80001d2:	f001 fe0d 	bl	8001df0 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b1e      	ldr	r3, [pc, #120]	; (8000254 <getKey1Input+0x9c>)
 80001dc:	601a      	str	r2, [r3, #0]

	if ((Key_Reg0 == Key_Reg1) && (Key_Reg1 == Key_Reg2)){
 80001de:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <getKey1Input+0x98>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <getKey1Input+0x94>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d12d      	bne.n	8000246 <getKey1Input+0x8e>
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <getKey1Input+0x94>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <getKey1Input+0x9c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d127      	bne.n	8000246 <getKey1Input+0x8e>
		// Nhan tha: Key_Reg2 == SET
		if (Key_Reg3 != Key_Reg2){
 80001f6:	4b19      	ldr	r3, [pc, #100]	; (800025c <getKey1Input+0xa4>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <getKey1Input+0x9c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00e      	beq.n	8000220 <getKey1Input+0x68>
			Key_Reg3 = Key_Reg2;
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <getKey1Input+0x9c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <getKey1Input+0xa4>)
 8000208:	6013      	str	r3, [r2, #0]
			if (Key_Reg2 == PRESSED_STATE){
 800020a:	4b12      	ldr	r3, [pc, #72]	; (8000254 <getKey1Input+0x9c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d119      	bne.n	8000246 <getKey1Input+0x8e>
				// TO DO
				button1_flag = 1;
 8000212:	4b13      	ldr	r3, [pc, #76]	; (8000260 <getKey1Input+0xa8>)
 8000214:	2201      	movs	r2, #1
 8000216:	601a      	str	r2, [r3, #0]
				Pressed_Key_Timer = 100;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <getKey1Input+0xac>)
 800021a:	2264      	movs	r2, #100	; 0x64
 800021c:	601a      	str	r2, [r3, #0]
				}
				Pressed_Key_Timer = 100;
			}
		}
	}
}
 800021e:	e012      	b.n	8000246 <getKey1Input+0x8e>
			Pressed_Key_Timer --;
 8000220:	4b10      	ldr	r3, [pc, #64]	; (8000264 <getKey1Input+0xac>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	3b01      	subs	r3, #1
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <getKey1Input+0xac>)
 8000228:	6013      	str	r3, [r2, #0]
			if (Pressed_Key_Timer <= 0){
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <getKey1Input+0xac>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dc09      	bgt.n	8000246 <getKey1Input+0x8e>
				if (Key_Reg2 == PRESSED_STATE){
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <getKey1Input+0x9c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d102      	bne.n	8000240 <getKey1Input+0x88>
					button1_flag = 1;
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <getKey1Input+0xa8>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
				Pressed_Key_Timer = 100;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <getKey1Input+0xac>)
 8000242:	2264      	movs	r2, #100	; 0x64
 8000244:	601a      	str	r2, [r3, #0]
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008
 8000258:	40010800 	.word	0x40010800
 800025c:	2000000c 	.word	0x2000000c
 8000260:	20000064 	.word	0x20000064
 8000264:	20000030 	.word	0x20000030

08000268 <getKey2Input>:

void getKey2Input(){
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	Key_Reg0a = Key_Reg1a;
 800026c:	4b23      	ldr	r3, [pc, #140]	; (80002fc <getKey2Input+0x94>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a23      	ldr	r2, [pc, #140]	; (8000300 <getKey2Input+0x98>)
 8000272:	6013      	str	r3, [r2, #0]
	Key_Reg1a = Key_Reg2a;
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <getKey2Input+0x9c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a20      	ldr	r2, [pc, #128]	; (80002fc <getKey2Input+0x94>)
 800027a:	6013      	str	r3, [r2, #0]
	Key_Reg2a = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800027c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000280:	4821      	ldr	r0, [pc, #132]	; (8000308 <getKey2Input+0xa0>)
 8000282:	f001 fdb5 	bl	8001df0 <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	461a      	mov	r2, r3
 800028a:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <getKey2Input+0x9c>)
 800028c:	601a      	str	r2, [r3, #0]

	if ((Key_Reg0a == Key_Reg1a) && (Key_Reg1a == Key_Reg2a)){
 800028e:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <getKey2Input+0x98>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <getKey2Input+0x94>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	429a      	cmp	r2, r3
 8000298:	d12d      	bne.n	80002f6 <getKey2Input+0x8e>
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <getKey2Input+0x94>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <getKey2Input+0x9c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d127      	bne.n	80002f6 <getKey2Input+0x8e>
		// Nhan tha: Key_Reg2 == SET
		if (Key_Reg3a != Key_Reg2a){
 80002a6:	4b19      	ldr	r3, [pc, #100]	; (800030c <getKey2Input+0xa4>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <getKey2Input+0x9c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d00e      	beq.n	80002d0 <getKey2Input+0x68>
			Key_Reg3a = Key_Reg2a;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <getKey2Input+0x9c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a15      	ldr	r2, [pc, #84]	; (800030c <getKey2Input+0xa4>)
 80002b8:	6013      	str	r3, [r2, #0]
			if (Key_Reg2a == PRESSED_STATE){
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <getKey2Input+0x9c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d119      	bne.n	80002f6 <getKey2Input+0x8e>
				// TO DO
				button2_flag = 1;
 80002c2:	4b13      	ldr	r3, [pc, #76]	; (8000310 <getKey2Input+0xa8>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	601a      	str	r2, [r3, #0]
				Pressed_Key_Timer_a = 100;
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <getKey2Input+0xac>)
 80002ca:	2264      	movs	r2, #100	; 0x64
 80002cc:	601a      	str	r2, [r3, #0]
				}
				Pressed_Key_Timer_a = 100;
			}
		}
	}
}
 80002ce:	e012      	b.n	80002f6 <getKey2Input+0x8e>
			Pressed_Key_Timer_a --;
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <getKey2Input+0xac>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <getKey2Input+0xac>)
 80002d8:	6013      	str	r3, [r2, #0]
			if (Pressed_Key_Timer_a == 0){
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <getKey2Input+0xac>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d109      	bne.n	80002f6 <getKey2Input+0x8e>
				if (Key_Reg2a == PRESSED_STATE){
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <getKey2Input+0x9c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d102      	bne.n	80002f0 <getKey2Input+0x88>
					button2_flag = 1;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <getKey2Input+0xa8>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	601a      	str	r2, [r3, #0]
				Pressed_Key_Timer_a = 100;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <getKey2Input+0xac>)
 80002f2:	2264      	movs	r2, #100	; 0x64
 80002f4:	601a      	str	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000014 	.word	0x20000014
 8000300:	20000010 	.word	0x20000010
 8000304:	20000018 	.word	0x20000018
 8000308:	40010800 	.word	0x40010800
 800030c:	2000001c 	.word	0x2000001c
 8000310:	20000068 	.word	0x20000068
 8000314:	20000034 	.word	0x20000034

08000318 <getKey3Input>:

void getKey3Input(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	Key_Reg0b = Key_Reg1b;
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <getKey3Input+0x94>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a23      	ldr	r2, [pc, #140]	; (80003b0 <getKey3Input+0x98>)
 8000322:	6013      	str	r3, [r2, #0]
	Key_Reg1b = Key_Reg2b;
 8000324:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <getKey3Input+0x9c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <getKey3Input+0x94>)
 800032a:	6013      	str	r3, [r2, #0]
	Key_Reg2b = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800032c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000330:	4821      	ldr	r0, [pc, #132]	; (80003b8 <getKey3Input+0xa0>)
 8000332:	f001 fd5d 	bl	8001df0 <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <getKey3Input+0x9c>)
 800033c:	601a      	str	r2, [r3, #0]

	if ((Key_Reg0b == Key_Reg1b) && (Key_Reg1b == Key_Reg2b)){
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <getKey3Input+0x98>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <getKey3Input+0x94>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	d12d      	bne.n	80003a6 <getKey3Input+0x8e>
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <getKey3Input+0x94>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <getKey3Input+0x9c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	429a      	cmp	r2, r3
 8000354:	d127      	bne.n	80003a6 <getKey3Input+0x8e>
		// Nhan tha: Key_Reg2 == SET
		if (Key_Reg3b != Key_Reg2b){
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <getKey3Input+0xa4>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <getKey3Input+0x9c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	d00e      	beq.n	8000380 <getKey3Input+0x68>
			Key_Reg3b = Key_Reg2b;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <getKey3Input+0x9c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <getKey3Input+0xa4>)
 8000368:	6013      	str	r3, [r2, #0]
			if (Key_Reg2b == PRESSED_STATE){
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <getKey3Input+0x9c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d119      	bne.n	80003a6 <getKey3Input+0x8e>
				// TO DO
				button3_flag = 1;
 8000372:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <getKey3Input+0xa8>)
 8000374:	2201      	movs	r2, #1
 8000376:	601a      	str	r2, [r3, #0]
				Pressed_Key_Timer_b = 100;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <getKey3Input+0xac>)
 800037a:	2264      	movs	r2, #100	; 0x64
 800037c:	601a      	str	r2, [r3, #0]
				}
				Pressed_Key_Timer_b = 100;
			}
		}
	}
}
 800037e:	e012      	b.n	80003a6 <getKey3Input+0x8e>
			Pressed_Key_Timer_b --;
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <getKey3Input+0xac>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3b01      	subs	r3, #1
 8000386:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <getKey3Input+0xac>)
 8000388:	6013      	str	r3, [r2, #0]
			if (Pressed_Key_Timer_b == 0){
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKey3Input+0xac>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d109      	bne.n	80003a6 <getKey3Input+0x8e>
				if (Key_Reg2b == PRESSED_STATE){
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <getKey3Input+0x9c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d102      	bne.n	80003a0 <getKey3Input+0x88>
					button3_flag = 1;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <getKey3Input+0xa8>)
 800039c:	2201      	movs	r2, #1
 800039e:	601a      	str	r2, [r3, #0]
				Pressed_Key_Timer_b = 100;
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <getKey3Input+0xac>)
 80003a2:	2264      	movs	r2, #100	; 0x64
 80003a4:	601a      	str	r2, [r3, #0]
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000024 	.word	0x20000024
 80003b0:	20000020 	.word	0x20000020
 80003b4:	20000028 	.word	0x20000028
 80003b8:	40010800 	.word	0x40010800
 80003bc:	2000002c 	.word	0x2000002c
 80003c0:	2000006c 	.word	0x2000006c
 80003c4:	20000038 	.word	0x20000038

080003c8 <display_7seg>:
 *      Author: Admin
 */

#include "display_7seg.h"

void display_7seg(int counter){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b09      	cmp	r3, #9
 80003d4:	f200 8180 	bhi.w	80006d8 <display_7seg+0x310>
 80003d8:	a201      	add	r2, pc, #4	; (adr r2, 80003e0 <display_7seg+0x18>)
 80003da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003de:	bf00      	nop
 80003e0:	08000409 	.word	0x08000409
 80003e4:	08000451 	.word	0x08000451
 80003e8:	08000499 	.word	0x08000499
 80003ec:	080004e1 	.word	0x080004e1
 80003f0:	08000529 	.word	0x08000529
 80003f4:	08000571 	.word	0x08000571
 80003f8:	080005b9 	.word	0x080005b9
 80003fc:	08000601 	.word	0x08000601
 8000400:	08000649 	.word	0x08000649
 8000404:	08000691 	.word	0x08000691
	switch(counter){
		case 0:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2101      	movs	r1, #1
 800040c:	48c6      	ldr	r0, [pc, #792]	; (8000728 <display_7seg+0x360>)
 800040e:	f001 fd06 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2102      	movs	r1, #2
 8000416:	48c4      	ldr	r0, [pc, #784]	; (8000728 <display_7seg+0x360>)
 8000418:	f001 fd01 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2104      	movs	r1, #4
 8000420:	48c1      	ldr	r0, [pc, #772]	; (8000728 <display_7seg+0x360>)
 8000422:	f001 fcfc 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2108      	movs	r1, #8
 800042a:	48bf      	ldr	r0, [pc, #764]	; (8000728 <display_7seg+0x360>)
 800042c:	f001 fcf7 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2110      	movs	r1, #16
 8000434:	48bc      	ldr	r0, [pc, #752]	; (8000728 <display_7seg+0x360>)
 8000436:	f001 fcf2 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	48ba      	ldr	r0, [pc, #744]	; (8000728 <display_7seg+0x360>)
 8000440:	f001 fced 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2140      	movs	r1, #64	; 0x40
 8000448:	48b7      	ldr	r0, [pc, #732]	; (8000728 <display_7seg+0x360>)
 800044a:	f001 fce8 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 800044e:	e167      	b.n	8000720 <display_7seg+0x358>

		case 1:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	48b4      	ldr	r0, [pc, #720]	; (8000728 <display_7seg+0x360>)
 8000456:	f001 fce2 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2102      	movs	r1, #2
 800045e:	48b2      	ldr	r0, [pc, #712]	; (8000728 <display_7seg+0x360>)
 8000460:	f001 fcdd 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2104      	movs	r1, #4
 8000468:	48af      	ldr	r0, [pc, #700]	; (8000728 <display_7seg+0x360>)
 800046a:	f001 fcd8 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2108      	movs	r1, #8
 8000472:	48ad      	ldr	r0, [pc, #692]	; (8000728 <display_7seg+0x360>)
 8000474:	f001 fcd3 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2110      	movs	r1, #16
 800047c:	48aa      	ldr	r0, [pc, #680]	; (8000728 <display_7seg+0x360>)
 800047e:	f001 fcce 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	2120      	movs	r1, #32
 8000486:	48a8      	ldr	r0, [pc, #672]	; (8000728 <display_7seg+0x360>)
 8000488:	f001 fcc9 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2140      	movs	r1, #64	; 0x40
 8000490:	48a5      	ldr	r0, [pc, #660]	; (8000728 <display_7seg+0x360>)
 8000492:	f001 fcc4 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 8000496:	e143      	b.n	8000720 <display_7seg+0x358>

		case 2:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2101      	movs	r1, #1
 800049c:	48a2      	ldr	r0, [pc, #648]	; (8000728 <display_7seg+0x360>)
 800049e:	f001 fcbe 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2102      	movs	r1, #2
 80004a6:	48a0      	ldr	r0, [pc, #640]	; (8000728 <display_7seg+0x360>)
 80004a8:	f001 fcb9 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2104      	movs	r1, #4
 80004b0:	489d      	ldr	r0, [pc, #628]	; (8000728 <display_7seg+0x360>)
 80004b2:	f001 fcb4 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2108      	movs	r1, #8
 80004ba:	489b      	ldr	r0, [pc, #620]	; (8000728 <display_7seg+0x360>)
 80004bc:	f001 fcaf 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2110      	movs	r1, #16
 80004c4:	4898      	ldr	r0, [pc, #608]	; (8000728 <display_7seg+0x360>)
 80004c6:	f001 fcaa 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2120      	movs	r1, #32
 80004ce:	4896      	ldr	r0, [pc, #600]	; (8000728 <display_7seg+0x360>)
 80004d0:	f001 fca5 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2140      	movs	r1, #64	; 0x40
 80004d8:	4893      	ldr	r0, [pc, #588]	; (8000728 <display_7seg+0x360>)
 80004da:	f001 fca0 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 80004de:	e11f      	b.n	8000720 <display_7seg+0x358>

		case 3:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2101      	movs	r1, #1
 80004e4:	4890      	ldr	r0, [pc, #576]	; (8000728 <display_7seg+0x360>)
 80004e6:	f001 fc9a 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2102      	movs	r1, #2
 80004ee:	488e      	ldr	r0, [pc, #568]	; (8000728 <display_7seg+0x360>)
 80004f0:	f001 fc95 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2104      	movs	r1, #4
 80004f8:	488b      	ldr	r0, [pc, #556]	; (8000728 <display_7seg+0x360>)
 80004fa:	f001 fc90 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2108      	movs	r1, #8
 8000502:	4889      	ldr	r0, [pc, #548]	; (8000728 <display_7seg+0x360>)
 8000504:	f001 fc8b 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2110      	movs	r1, #16
 800050c:	4886      	ldr	r0, [pc, #536]	; (8000728 <display_7seg+0x360>)
 800050e:	f001 fc86 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2120      	movs	r1, #32
 8000516:	4884      	ldr	r0, [pc, #528]	; (8000728 <display_7seg+0x360>)
 8000518:	f001 fc81 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	4881      	ldr	r0, [pc, #516]	; (8000728 <display_7seg+0x360>)
 8000522:	f001 fc7c 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 8000526:	e0fb      	b.n	8000720 <display_7seg+0x358>

		case 4:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	487e      	ldr	r0, [pc, #504]	; (8000728 <display_7seg+0x360>)
 800052e:	f001 fc76 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	487c      	ldr	r0, [pc, #496]	; (8000728 <display_7seg+0x360>)
 8000538:	f001 fc71 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2104      	movs	r1, #4
 8000540:	4879      	ldr	r0, [pc, #484]	; (8000728 <display_7seg+0x360>)
 8000542:	f001 fc6c 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	4877      	ldr	r0, [pc, #476]	; (8000728 <display_7seg+0x360>)
 800054c:	f001 fc67 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4874      	ldr	r0, [pc, #464]	; (8000728 <display_7seg+0x360>)
 8000556:	f001 fc62 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	4872      	ldr	r0, [pc, #456]	; (8000728 <display_7seg+0x360>)
 8000560:	f001 fc5d 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	486f      	ldr	r0, [pc, #444]	; (8000728 <display_7seg+0x360>)
 800056a:	f001 fc58 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 800056e:	e0d7      	b.n	8000720 <display_7seg+0x358>

		case 5:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	486c      	ldr	r0, [pc, #432]	; (8000728 <display_7seg+0x360>)
 8000576:	f001 fc52 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2102      	movs	r1, #2
 800057e:	486a      	ldr	r0, [pc, #424]	; (8000728 <display_7seg+0x360>)
 8000580:	f001 fc4d 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	4867      	ldr	r0, [pc, #412]	; (8000728 <display_7seg+0x360>)
 800058a:	f001 fc48 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	4865      	ldr	r0, [pc, #404]	; (8000728 <display_7seg+0x360>)
 8000594:	f001 fc43 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2110      	movs	r1, #16
 800059c:	4862      	ldr	r0, [pc, #392]	; (8000728 <display_7seg+0x360>)
 800059e:	f001 fc3e 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	4860      	ldr	r0, [pc, #384]	; (8000728 <display_7seg+0x360>)
 80005a8:	f001 fc39 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	485d      	ldr	r0, [pc, #372]	; (8000728 <display_7seg+0x360>)
 80005b2:	f001 fc34 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 80005b6:	e0b3      	b.n	8000720 <display_7seg+0x358>

		case 6:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	485a      	ldr	r0, [pc, #360]	; (8000728 <display_7seg+0x360>)
 80005be:	f001 fc2e 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2102      	movs	r1, #2
 80005c6:	4858      	ldr	r0, [pc, #352]	; (8000728 <display_7seg+0x360>)
 80005c8:	f001 fc29 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	4855      	ldr	r0, [pc, #340]	; (8000728 <display_7seg+0x360>)
 80005d2:	f001 fc24 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	4853      	ldr	r0, [pc, #332]	; (8000728 <display_7seg+0x360>)
 80005dc:	f001 fc1f 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	4850      	ldr	r0, [pc, #320]	; (8000728 <display_7seg+0x360>)
 80005e6:	f001 fc1a 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	484e      	ldr	r0, [pc, #312]	; (8000728 <display_7seg+0x360>)
 80005f0:	f001 fc15 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	484b      	ldr	r0, [pc, #300]	; (8000728 <display_7seg+0x360>)
 80005fa:	f001 fc10 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 80005fe:	e08f      	b.n	8000720 <display_7seg+0x358>

		case 7:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	4848      	ldr	r0, [pc, #288]	; (8000728 <display_7seg+0x360>)
 8000606:	f001 fc0a 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	4846      	ldr	r0, [pc, #280]	; (8000728 <display_7seg+0x360>)
 8000610:	f001 fc05 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4843      	ldr	r0, [pc, #268]	; (8000728 <display_7seg+0x360>)
 800061a:	f001 fc00 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2108      	movs	r1, #8
 8000622:	4841      	ldr	r0, [pc, #260]	; (8000728 <display_7seg+0x360>)
 8000624:	f001 fbfb 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	483e      	ldr	r0, [pc, #248]	; (8000728 <display_7seg+0x360>)
 800062e:	f001 fbf6 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2120      	movs	r1, #32
 8000636:	483c      	ldr	r0, [pc, #240]	; (8000728 <display_7seg+0x360>)
 8000638:	f001 fbf1 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	4839      	ldr	r0, [pc, #228]	; (8000728 <display_7seg+0x360>)
 8000642:	f001 fbec 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 8000646:	e06b      	b.n	8000720 <display_7seg+0x358>

		case 8:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	4836      	ldr	r0, [pc, #216]	; (8000728 <display_7seg+0x360>)
 800064e:	f001 fbe6 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2102      	movs	r1, #2
 8000656:	4834      	ldr	r0, [pc, #208]	; (8000728 <display_7seg+0x360>)
 8000658:	f001 fbe1 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	4831      	ldr	r0, [pc, #196]	; (8000728 <display_7seg+0x360>)
 8000662:	f001 fbdc 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	482f      	ldr	r0, [pc, #188]	; (8000728 <display_7seg+0x360>)
 800066c:	f001 fbd7 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2110      	movs	r1, #16
 8000674:	482c      	ldr	r0, [pc, #176]	; (8000728 <display_7seg+0x360>)
 8000676:	f001 fbd2 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	482a      	ldr	r0, [pc, #168]	; (8000728 <display_7seg+0x360>)
 8000680:	f001 fbcd 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	4827      	ldr	r0, [pc, #156]	; (8000728 <display_7seg+0x360>)
 800068a:	f001 fbc8 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 800068e:	e047      	b.n	8000720 <display_7seg+0x358>

		case 9:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4824      	ldr	r0, [pc, #144]	; (8000728 <display_7seg+0x360>)
 8000696:	f001 fbc2 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2102      	movs	r1, #2
 800069e:	4822      	ldr	r0, [pc, #136]	; (8000728 <display_7seg+0x360>)
 80006a0:	f001 fbbd 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	481f      	ldr	r0, [pc, #124]	; (8000728 <display_7seg+0x360>)
 80006aa:	f001 fbb8 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	481d      	ldr	r0, [pc, #116]	; (8000728 <display_7seg+0x360>)
 80006b4:	f001 fbb3 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	481a      	ldr	r0, [pc, #104]	; (8000728 <display_7seg+0x360>)
 80006be:	f001 fbae 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	4818      	ldr	r0, [pc, #96]	; (8000728 <display_7seg+0x360>)
 80006c8:	f001 fba9 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	4815      	ldr	r0, [pc, #84]	; (8000728 <display_7seg+0x360>)
 80006d2:	f001 fba4 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 80006d6:	e023      	b.n	8000720 <display_7seg+0x358>

		default:
			HAL_GPIO_WritePin(sega_GPIO_Port, sega_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2101      	movs	r1, #1
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <display_7seg+0x360>)
 80006de:	f001 fb9e 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segb_GPIO_Port, segb_Pin, SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2102      	movs	r1, #2
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <display_7seg+0x360>)
 80006e8:	f001 fb99 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segc_GPIO_Port, segc_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2104      	movs	r1, #4
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <display_7seg+0x360>)
 80006f2:	f001 fb94 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segd_GPIO_Port, segd_Pin, SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <display_7seg+0x360>)
 80006fc:	f001 fb8f 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(sege_GPIO_Port, sege_Pin, SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <display_7seg+0x360>)
 8000706:	f001 fb8a 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segf_GPIO_Port, segf_Pin, SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2120      	movs	r1, #32
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <display_7seg+0x360>)
 8000710:	f001 fb85 	bl	8001e1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(segg_GPIO_Port, segg_Pin, SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <display_7seg+0x360>)
 800071a:	f001 fb80 	bl	8001e1e <HAL_GPIO_WritePin>
			break;
 800071e:	bf00      	nop
	}
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40010c00 	.word	0x40010c00

0800072c <update_7seg>:

void update_7seg(int index){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b03      	cmp	r3, #3
 8000738:	f200 808c 	bhi.w	8000854 <update_7seg+0x128>
 800073c:	a201      	add	r2, pc, #4	; (adr r2, 8000744 <update_7seg+0x18>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	08000755 	.word	0x08000755
 8000748:	08000795 	.word	0x08000795
 800074c:	080007d5 	.word	0x080007d5
 8000750:	08000815 	.word	0x08000815
	switch(index){
	case 0:
	// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	4841      	ldr	r0, [pc, #260]	; (8000860 <update_7seg+0x134>)
 800075c:	f001 fb5f 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000766:	483e      	ldr	r0, [pc, #248]	; (8000860 <update_7seg+0x134>)
 8000768:	f001 fb59 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000772:	483b      	ldr	r0, [pc, #236]	; (8000860 <update_7seg+0x134>)
 8000774:	f001 fb53 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800077e:	4838      	ldr	r0, [pc, #224]	; (8000860 <update_7seg+0x134>)
 8000780:	f001 fb4d 	bl	8001e1e <HAL_GPIO_WritePin>

		display_7seg(led_buffer[index]);
 8000784:	4a37      	ldr	r2, [pc, #220]	; (8000864 <update_7seg+0x138>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe1b 	bl	80003c8 <display_7seg>
		break;
 8000792:	e060      	b.n	8000856 <update_7seg+0x12a>

	case 1:
	// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	4831      	ldr	r0, [pc, #196]	; (8000860 <update_7seg+0x134>)
 800079c:	f001 fb3f 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a6:	482e      	ldr	r0, [pc, #184]	; (8000860 <update_7seg+0x134>)
 80007a8:	f001 fb39 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	482b      	ldr	r0, [pc, #172]	; (8000860 <update_7seg+0x134>)
 80007b4:	f001 fb33 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007be:	4828      	ldr	r0, [pc, #160]	; (8000860 <update_7seg+0x134>)
 80007c0:	f001 fb2d 	bl	8001e1e <HAL_GPIO_WritePin>

		display_7seg(led_buffer[index]);
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <update_7seg+0x138>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fdfb 	bl	80003c8 <display_7seg>
		break;
 80007d2:	e040      	b.n	8000856 <update_7seg+0x12a>

	case 2:
	// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007da:	4821      	ldr	r0, [pc, #132]	; (8000860 <update_7seg+0x134>)
 80007dc:	f001 fb1f 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e6:	481e      	ldr	r0, [pc, #120]	; (8000860 <update_7seg+0x134>)
 80007e8:	f001 fb19 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f2:	481b      	ldr	r0, [pc, #108]	; (8000860 <update_7seg+0x134>)
 80007f4:	f001 fb13 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007fe:	4818      	ldr	r0, [pc, #96]	; (8000860 <update_7seg+0x134>)
 8000800:	f001 fb0d 	bl	8001e1e <HAL_GPIO_WritePin>

		display_7seg(led_buffer[index]);
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <update_7seg+0x138>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fddb 	bl	80003c8 <display_7seg>
		break;
 8000812:	e020      	b.n	8000856 <update_7seg+0x12a>

	case 3:
	// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <update_7seg+0x134>)
 800081c:	f001 faff 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <update_7seg+0x134>)
 8000828:	f001 faf9 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <update_7seg+0x134>)
 8000834:	f001 faf3 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083e:	4808      	ldr	r0, [pc, #32]	; (8000860 <update_7seg+0x134>)
 8000840:	f001 faed 	bl	8001e1e <HAL_GPIO_WritePin>

		display_7seg(led_buffer[index]);
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <update_7seg+0x138>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fdbb 	bl	80003c8 <display_7seg>
		break;
 8000852:	e000      	b.n	8000856 <update_7seg+0x12a>

	default:
		break ;
 8000854:	bf00      	nop
	}
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40010c00 	.word	0x40010c00
 8000864:	20000070 	.word	0x20000070

08000868 <fsm_automatic_run>:
 *      Author: Admin
 */
#include "fsm_automatic.h"
#include "global.h"

void fsm_automatic_run(){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	mode = 1;
 800086c:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <fsm_automatic_run+0x100>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
	led_buffer[1] = mode;
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <fsm_automatic_run+0x100>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a3d      	ldr	r2, [pc, #244]	; (800096c <fsm_automatic_run+0x104>)
 8000878:	6053      	str	r3, [r2, #4]

	switch (status){
 800087a:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <fsm_automatic_run+0x108>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3b01      	subs	r3, #1
 8000880:	2b03      	cmp	r3, #3
 8000882:	d867      	bhi.n	8000954 <fsm_automatic_run+0xec>
 8000884:	a201      	add	r2, pc, #4	; (adr r2, 800088c <fsm_automatic_run+0x24>)
 8000886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088a:	bf00      	nop
 800088c:	0800089d 	.word	0x0800089d
 8000890:	080008b9 	.word	0x080008b9
 8000894:	080008ed 	.word	0x080008ed
 8000898:	08000921 	.word	0x08000921
		case INIT:
			set_LED_Init();
 800089c:	f000 fb54 	bl	8000f48 <set_LED_Init>
			// go red
			status = AUTO_RED;
 80008a0:	4b33      	ldr	r3, [pc, #204]	; (8000970 <fsm_automatic_run+0x108>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
			setTimer1(duration_red*100);
 80008a6:	4b33      	ldr	r3, [pc, #204]	; (8000974 <fsm_automatic_run+0x10c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fd6b 	bl	800138c <setTimer1>
			break;
 80008b6:	e054      	b.n	8000962 <fsm_automatic_run+0xfa>

		case AUTO_RED:
			// TO DO
			set_LED_Red();
 80008b8:	f000 fb5c 	bl	8000f74 <set_LED_Red>
			// RED time out! Go GREEN
			if (timer1_flag == 1){
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <fsm_automatic_run+0x110>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10a      	bne.n	80008da <fsm_automatic_run+0x72>
				status = AUTO_GREEN;
 80008c4:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <fsm_automatic_run+0x108>)
 80008c6:	2203      	movs	r2, #3
 80008c8:	601a      	str	r2, [r3, #0]
				setTimer1(duration_green*100);
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <fsm_automatic_run+0x114>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2264      	movs	r2, #100	; 0x64
 80008d0:	fb02 f303 	mul.w	r3, r2, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fd59 	bl	800138c <setTimer1>
			}
			// Button is pressed => Go MAN_RED
			if (isButton1Pressed() == 1){
 80008da:	f7ff fc37 	bl	800014c <isButton1Pressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d139      	bne.n	8000958 <fsm_automatic_run+0xf0>
				status = MAN_RED;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <fsm_automatic_run+0x108>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	601a      	str	r2, [r3, #0]
			}
			break;
 80008ea:	e035      	b.n	8000958 <fsm_automatic_run+0xf0>

		case AUTO_GREEN:
			// TO DO
			set_LED_Green();
 80008ec:	f000 fb58 	bl	8000fa0 <set_LED_Green>
			// GREEN time out! Go YELLOW
			if (timer1_flag == 1){
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <fsm_automatic_run+0x110>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d10a      	bne.n	800090e <fsm_automatic_run+0xa6>
				status = AUTO_YELLOW;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <fsm_automatic_run+0x108>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	601a      	str	r2, [r3, #0]
				setTimer1(duration_yellow*100);
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <fsm_automatic_run+0x118>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2264      	movs	r2, #100	; 0x64
 8000904:	fb02 f303 	mul.w	r3, r2, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fd3f 	bl	800138c <setTimer1>
			}
			// Button is pressed => Go MAN_GREEN
			if (isButton1Pressed() == 1){
 800090e:	f7ff fc1d 	bl	800014c <isButton1Pressed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d121      	bne.n	800095c <fsm_automatic_run+0xf4>
				status = MAN_RED;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <fsm_automatic_run+0x108>)
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
			}
			break;
 800091e:	e01d      	b.n	800095c <fsm_automatic_run+0xf4>

		case AUTO_YELLOW:
			// TO DO
			set_LED_Yellow();
 8000920:	f000 fb54 	bl	8000fcc <set_LED_Yellow>
			// YELLOW time out! Go RED
			if (timer1_flag == 1){
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <fsm_automatic_run+0x110>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d10a      	bne.n	8000942 <fsm_automatic_run+0xda>
				status = AUTO_RED;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <fsm_automatic_run+0x108>)
 800092e:	2202      	movs	r2, #2
 8000930:	601a      	str	r2, [r3, #0]
				setTimer1(duration_red*100);
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <fsm_automatic_run+0x10c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fd25 	bl	800138c <setTimer1>
			}
			// Button is pressed => Go MAN_YELLOW
			if (isButton1Pressed() == 1){
 8000942:	f7ff fc03 	bl	800014c <isButton1Pressed>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d109      	bne.n	8000960 <fsm_automatic_run+0xf8>
				status = MAN_RED;
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <fsm_automatic_run+0x108>)
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
			}
			break;
 8000952:	e005      	b.n	8000960 <fsm_automatic_run+0xf8>

		default:
			break;
 8000954:	bf00      	nop
 8000956:	e004      	b.n	8000962 <fsm_automatic_run+0xfa>
			break;
 8000958:	bf00      	nop
 800095a:	e002      	b.n	8000962 <fsm_automatic_run+0xfa>
			break;
 800095c:	bf00      	nop
 800095e:	e000      	b.n	8000962 <fsm_automatic_run+0xfa>
			break;
 8000960:	bf00      	nop
	}
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000080 	.word	0x20000080
 800096c:	20000070 	.word	0x20000070
 8000970:	20000084 	.word	0x20000084
 8000974:	20000094 	.word	0x20000094
 8000978:	200000a4 	.word	0x200000a4
 800097c:	20000098 	.word	0x20000098
 8000980:	2000009c 	.word	0x2000009c

08000984 <fsm_automatic_run_a>:

// ---------------------------------------------------------------------

void fsm_automatic_run_a(){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	mode = 1;
 8000988:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <fsm_automatic_run_a+0x100>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
	led_buffer[1] = mode;
 800098e:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <fsm_automatic_run_a+0x100>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a3d      	ldr	r2, [pc, #244]	; (8000a88 <fsm_automatic_run_a+0x104>)
 8000994:	6053      	str	r3, [r2, #4]

	switch (status_a){
 8000996:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <fsm_automatic_run_a+0x108>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3b05      	subs	r3, #5
 800099c:	2b03      	cmp	r3, #3
 800099e:	d867      	bhi.n	8000a70 <fsm_automatic_run_a+0xec>
 80009a0:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <fsm_automatic_run_a+0x24>)
 80009a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a6:	bf00      	nop
 80009a8:	080009b9 	.word	0x080009b9
 80009ac:	080009d5 	.word	0x080009d5
 80009b0:	08000a09 	.word	0x08000a09
 80009b4:	08000a3d 	.word	0x08000a3d
		case INIT_a:
			set_LED_Init_a();
 80009b8:	f000 fb1e 	bl	8000ff8 <set_LED_Init_a>
			// go to red
			status_a = AUTO_GREEN_a;
 80009bc:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <fsm_automatic_run_a+0x108>)
 80009be:	2207      	movs	r2, #7
 80009c0:	601a      	str	r2, [r3, #0]
			setTimer3(duration_green*100);
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <fsm_automatic_run_a+0x10c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2264      	movs	r2, #100	; 0x64
 80009c8:	fb02 f303 	mul.w	r3, r2, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fd05 	bl	80013dc <setTimer3>
			break;
 80009d2:	e054      	b.n	8000a7e <fsm_automatic_run_a+0xfa>

		case AUTO_RED_a:
			// TO DO
			set_LED_Red_a();
 80009d4:	f000 fb26 	bl	8001024 <set_LED_Red_a>
			// RED time out! Go GREEN
			if (timer3_flag == 1){
 80009d8:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <fsm_automatic_run_a+0x110>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d10a      	bne.n	80009f6 <fsm_automatic_run_a+0x72>
				status_a = AUTO_GREEN_a;
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <fsm_automatic_run_a+0x108>)
 80009e2:	2207      	movs	r2, #7
 80009e4:	601a      	str	r2, [r3, #0]
				setTimer3(duration_green*100);
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <fsm_automatic_run_a+0x10c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2264      	movs	r2, #100	; 0x64
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fcf3 	bl	80013dc <setTimer3>
			}
			// Button is pressed => Go MAN_RED
			if (isButton1Pressed() == 1){
 80009f6:	f7ff fba9 	bl	800014c <isButton1Pressed>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d139      	bne.n	8000a74 <fsm_automatic_run_a+0xf0>
				status_a = MAN_RED;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <fsm_automatic_run_a+0x108>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a06:	e035      	b.n	8000a74 <fsm_automatic_run_a+0xf0>

		case AUTO_GREEN_a:
			// TO DO
			set_LED_Green_a();
 8000a08:	f000 fb22 	bl	8001050 <set_LED_Green_a>
			// GREEN time out! Go YELLOW
			if (timer3_flag == 1){
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <fsm_automatic_run_a+0x110>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10a      	bne.n	8000a2a <fsm_automatic_run_a+0xa6>
				status_a = AUTO_YELLOW_a;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <fsm_automatic_run_a+0x108>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	601a      	str	r2, [r3, #0]
				setTimer3(duration_yellow*100);
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <fsm_automatic_run_a+0x114>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2264      	movs	r2, #100	; 0x64
 8000a20:	fb02 f303 	mul.w	r3, r2, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fcd9 	bl	80013dc <setTimer3>
			}
			// Button is pressed => Go MAN_GREEN
			if (isButton1Pressed() == 1){
 8000a2a:	f7ff fb8f 	bl	800014c <isButton1Pressed>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d121      	bne.n	8000a78 <fsm_automatic_run_a+0xf4>
				status_a = MAN_RED;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <fsm_automatic_run_a+0x108>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a3a:	e01d      	b.n	8000a78 <fsm_automatic_run_a+0xf4>

		case AUTO_YELLOW_a:
			// TO DO
			set_LED_Yellow_a();
 8000a3c:	f000 fb1e 	bl	800107c <set_LED_Yellow_a>
			// YELLOW time out! Go RED
			if (timer3_flag == 1){
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <fsm_automatic_run_a+0x110>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10a      	bne.n	8000a5e <fsm_automatic_run_a+0xda>
				status_a = AUTO_RED_a;
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <fsm_automatic_run_a+0x108>)
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	601a      	str	r2, [r3, #0]
				setTimer3(duration_red*100);
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <fsm_automatic_run_a+0x118>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2264      	movs	r2, #100	; 0x64
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fcbf 	bl	80013dc <setTimer3>
			}
			// Button is pressed => Go MAN_YELLOW
			if (isButton1Pressed() == 1){
 8000a5e:	f7ff fb75 	bl	800014c <isButton1Pressed>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d109      	bne.n	8000a7c <fsm_automatic_run_a+0xf8>
				status_a = MAN_RED;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <fsm_automatic_run_a+0x108>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a6e:	e005      	b.n	8000a7c <fsm_automatic_run_a+0xf8>

		default:
			break;
 8000a70:	bf00      	nop
 8000a72:	e004      	b.n	8000a7e <fsm_automatic_run_a+0xfa>
			break;
 8000a74:	bf00      	nop
 8000a76:	e002      	b.n	8000a7e <fsm_automatic_run_a+0xfa>
			break;
 8000a78:	bf00      	nop
 8000a7a:	e000      	b.n	8000a7e <fsm_automatic_run_a+0xfa>
			break;
 8000a7c:	bf00      	nop
		}
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000080 	.word	0x20000080
 8000a88:	20000070 	.word	0x20000070
 8000a8c:	20000088 	.word	0x20000088
 8000a90:	20000098 	.word	0x20000098
 8000a94:	200000b4 	.word	0x200000b4
 8000a98:	2000009c 	.word	0x2000009c
 8000a9c:	20000094 	.word	0x20000094

08000aa0 <fsm_manual_run>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	switch (status){
 8000aa4:	4b9e      	ldr	r3, [pc, #632]	; (8000d20 <fsm_manual_run+0x280>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b0e      	cmp	r3, #14
 8000aaa:	f000 8179 	beq.w	8000da0 <fsm_manual_run+0x300>
 8000aae:	2b0e      	cmp	r3, #14
 8000ab0:	f300 8225 	bgt.w	8000efe <fsm_manual_run+0x45e>
 8000ab4:	2b0c      	cmp	r3, #12
 8000ab6:	d003      	beq.n	8000ac0 <fsm_manual_run+0x20>
 8000ab8:	2b0d      	cmp	r3, #13
 8000aba:	f000 80ac 	beq.w	8000c16 <fsm_manual_run+0x176>
				status_a = AUTO_RED_a;
			}
			break;

		default:
			break;
 8000abe:	e21e      	b.n	8000efe <fsm_manual_run+0x45e>
			mode = 2;
 8000ac0:	4b98      	ldr	r3, [pc, #608]	; (8000d24 <fsm_manual_run+0x284>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	601a      	str	r2, [r3, #0]
			led_buffer[1] = mode;
 8000ac6:	4b97      	ldr	r3, [pc, #604]	; (8000d24 <fsm_manual_run+0x284>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a97      	ldr	r2, [pc, #604]	; (8000d28 <fsm_manual_run+0x288>)
 8000acc:	6053      	str	r3, [r2, #4]
			if (duration_red < 10){
 8000ace:	4b97      	ldr	r3, [pc, #604]	; (8000d2c <fsm_manual_run+0x28c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b09      	cmp	r3, #9
 8000ad4:	dc07      	bgt.n	8000ae6 <fsm_manual_run+0x46>
				led_buffer[2] = 0;
 8000ad6:	4b94      	ldr	r3, [pc, #592]	; (8000d28 <fsm_manual_run+0x288>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
				led_buffer[3] = duration_red;
 8000adc:	4b93      	ldr	r3, [pc, #588]	; (8000d2c <fsm_manual_run+0x28c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a91      	ldr	r2, [pc, #580]	; (8000d28 <fsm_manual_run+0x288>)
 8000ae2:	60d3      	str	r3, [r2, #12]
 8000ae4:	e018      	b.n	8000b18 <fsm_manual_run+0x78>
				led_buffer[2] = duration_red / 10;
 8000ae6:	4b91      	ldr	r3, [pc, #580]	; (8000d2c <fsm_manual_run+0x28c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a91      	ldr	r2, [pc, #580]	; (8000d30 <fsm_manual_run+0x290>)
 8000aec:	fb82 1203 	smull	r1, r2, r2, r3
 8000af0:	1092      	asrs	r2, r2, #2
 8000af2:	17db      	asrs	r3, r3, #31
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	4a8c      	ldr	r2, [pc, #560]	; (8000d28 <fsm_manual_run+0x288>)
 8000af8:	6093      	str	r3, [r2, #8]
				led_buffer[3] = duration_red % 10;
 8000afa:	4b8c      	ldr	r3, [pc, #560]	; (8000d2c <fsm_manual_run+0x28c>)
 8000afc:	6819      	ldr	r1, [r3, #0]
 8000afe:	4b8c      	ldr	r3, [pc, #560]	; (8000d30 <fsm_manual_run+0x290>)
 8000b00:	fb83 2301 	smull	r2, r3, r3, r1
 8000b04:	109a      	asrs	r2, r3, #2
 8000b06:	17cb      	asrs	r3, r1, #31
 8000b08:	1ad2      	subs	r2, r2, r3
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	1aca      	subs	r2, r1, r3
 8000b14:	4b84      	ldr	r3, [pc, #528]	; (8000d28 <fsm_manual_run+0x288>)
 8000b16:	60da      	str	r2, [r3, #12]
			set_LED_Red();
 8000b18:	f000 fa2c 	bl	8000f74 <set_LED_Red>
			set_LED_Red_a();
 8000b1c:	f000 fa82 	bl	8001024 <set_LED_Red_a>
			if (timer1_flag == 1){
 8000b20:	4b84      	ldr	r3, [pc, #528]	; (8000d34 <fsm_manual_run+0x294>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d111      	bne.n	8000b4c <fsm_manual_run+0xac>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4883      	ldr	r0, [pc, #524]	; (8000d38 <fsm_manual_run+0x298>)
 8000b2c:	f001 f98f 	bl	8001e4e <HAL_GPIO_TogglePin>
				setTimer1((4 * 1000000) /((prescaler_blink + 1)*(period_blink + 1)));
 8000b30:	4b82      	ldr	r3, [pc, #520]	; (8000d3c <fsm_manual_run+0x29c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a82      	ldr	r2, [pc, #520]	; (8000d40 <fsm_manual_run+0x2a0>)
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	3201      	adds	r2, #1
 8000b3c:	fb02 f303 	mul.w	r3, r2, r3
 8000b40:	4a80      	ldr	r2, [pc, #512]	; (8000d44 <fsm_manual_run+0x2a4>)
 8000b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fc20 	bl	800138c <setTimer1>
			if (timer3_flag == 1){
 8000b4c:	4b7e      	ldr	r3, [pc, #504]	; (8000d48 <fsm_manual_run+0x2a8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d111      	bne.n	8000b78 <fsm_manual_run+0xd8>
				HAL_GPIO_TogglePin(LED_RED_A_GPIO_Port, LED_RED_A_Pin);
 8000b54:	2102      	movs	r1, #2
 8000b56:	4878      	ldr	r0, [pc, #480]	; (8000d38 <fsm_manual_run+0x298>)
 8000b58:	f001 f979 	bl	8001e4e <HAL_GPIO_TogglePin>
				setTimer3((4 * 1000000) /((prescaler_blink + 1)*(period_blink + 1)));
 8000b5c:	4b77      	ldr	r3, [pc, #476]	; (8000d3c <fsm_manual_run+0x29c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a77      	ldr	r2, [pc, #476]	; (8000d40 <fsm_manual_run+0x2a0>)
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	3201      	adds	r2, #1
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
 8000b6c:	4a75      	ldr	r2, [pc, #468]	; (8000d44 <fsm_manual_run+0x2a4>)
 8000b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fc32 	bl	80013dc <setTimer3>
			if (isButton1Pressed() == 1){
 8000b78:	f7ff fae8 	bl	800014c <isButton1Pressed>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d105      	bne.n	8000b8e <fsm_manual_run+0xee>
				status = MAN_GREEN;
 8000b82:	4b67      	ldr	r3, [pc, #412]	; (8000d20 <fsm_manual_run+0x280>)
 8000b84:	220d      	movs	r2, #13
 8000b86:	601a      	str	r2, [r3, #0]
				status_a = MAN_YELLOW;
 8000b88:	4b70      	ldr	r3, [pc, #448]	; (8000d4c <fsm_manual_run+0x2ac>)
 8000b8a:	220e      	movs	r2, #14
 8000b8c:	601a      	str	r2, [r3, #0]
			if (isButton2Pressed() == 1){
 8000b8e:	f7ff faef 	bl	8000170 <isButton2Pressed>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d131      	bne.n	8000bfc <fsm_manual_run+0x15c>
				if (duration_red <= 99) duration_red ++;
 8000b98:	4b64      	ldr	r3, [pc, #400]	; (8000d2c <fsm_manual_run+0x28c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b63      	cmp	r3, #99	; 0x63
 8000b9e:	dc05      	bgt.n	8000bac <fsm_manual_run+0x10c>
 8000ba0:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <fsm_manual_run+0x28c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a61      	ldr	r2, [pc, #388]	; (8000d2c <fsm_manual_run+0x28c>)
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e002      	b.n	8000bb2 <fsm_manual_run+0x112>
				else duration_red = 1;
 8000bac:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <fsm_manual_run+0x28c>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
				if (duration_red < 10){
 8000bb2:	4b5e      	ldr	r3, [pc, #376]	; (8000d2c <fsm_manual_run+0x28c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b09      	cmp	r3, #9
 8000bb8:	dc07      	bgt.n	8000bca <fsm_manual_run+0x12a>
					led_buffer[2] = 0;
 8000bba:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <fsm_manual_run+0x288>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
					led_buffer[3] = duration_red;
 8000bc0:	4b5a      	ldr	r3, [pc, #360]	; (8000d2c <fsm_manual_run+0x28c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a58      	ldr	r2, [pc, #352]	; (8000d28 <fsm_manual_run+0x288>)
 8000bc6:	60d3      	str	r3, [r2, #12]
 8000bc8:	e018      	b.n	8000bfc <fsm_manual_run+0x15c>
					led_buffer[2] = duration_red / 10;
 8000bca:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <fsm_manual_run+0x28c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <fsm_manual_run+0x290>)
 8000bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd4:	1092      	asrs	r2, r2, #2
 8000bd6:	17db      	asrs	r3, r3, #31
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	4a53      	ldr	r2, [pc, #332]	; (8000d28 <fsm_manual_run+0x288>)
 8000bdc:	6093      	str	r3, [r2, #8]
					led_buffer[3] = duration_red % 10;
 8000bde:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <fsm_manual_run+0x28c>)
 8000be0:	6819      	ldr	r1, [r3, #0]
 8000be2:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <fsm_manual_run+0x290>)
 8000be4:	fb83 2301 	smull	r2, r3, r3, r1
 8000be8:	109a      	asrs	r2, r3, #2
 8000bea:	17cb      	asrs	r3, r1, #31
 8000bec:	1ad2      	subs	r2, r2, r3
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	1aca      	subs	r2, r1, r3
 8000bf8:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <fsm_manual_run+0x288>)
 8000bfa:	60da      	str	r2, [r3, #12]
			if (isButton3Pressed() == 1){
 8000bfc:	f7ff faca 	bl	8000194 <isButton3Pressed>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	f040 817d 	bne.w	8000f02 <fsm_manual_run+0x462>
				status = MAN_GREEN;
 8000c08:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <fsm_manual_run+0x280>)
 8000c0a:	220d      	movs	r2, #13
 8000c0c:	601a      	str	r2, [r3, #0]
				status_a = MAN_GREEN;
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <fsm_manual_run+0x2ac>)
 8000c10:	220d      	movs	r2, #13
 8000c12:	601a      	str	r2, [r3, #0]
			break;
 8000c14:	e175      	b.n	8000f02 <fsm_manual_run+0x462>
			mode = 3;
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <fsm_manual_run+0x284>)
 8000c18:	2203      	movs	r2, #3
 8000c1a:	601a      	str	r2, [r3, #0]
			led_buffer[1] = mode;
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <fsm_manual_run+0x284>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a41      	ldr	r2, [pc, #260]	; (8000d28 <fsm_manual_run+0x288>)
 8000c22:	6053      	str	r3, [r2, #4]
			if (duration_green < 10){
 8000c24:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b09      	cmp	r3, #9
 8000c2a:	dc07      	bgt.n	8000c3c <fsm_manual_run+0x19c>
				led_buffer[2] = 0;
 8000c2c:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <fsm_manual_run+0x288>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
				led_buffer[3] = duration_green;
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <fsm_manual_run+0x288>)
 8000c38:	60d3      	str	r3, [r2, #12]
 8000c3a:	e018      	b.n	8000c6e <fsm_manual_run+0x1ce>
				led_buffer[2] = duration_green / 10;
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a3b      	ldr	r2, [pc, #236]	; (8000d30 <fsm_manual_run+0x290>)
 8000c42:	fb82 1203 	smull	r1, r2, r2, r3
 8000c46:	1092      	asrs	r2, r2, #2
 8000c48:	17db      	asrs	r3, r3, #31
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	4a36      	ldr	r2, [pc, #216]	; (8000d28 <fsm_manual_run+0x288>)
 8000c4e:	6093      	str	r3, [r2, #8]
				led_buffer[3] = duration_green % 10;
 8000c50:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <fsm_manual_run+0x290>)
 8000c56:	fb83 2301 	smull	r2, r3, r3, r1
 8000c5a:	109a      	asrs	r2, r3, #2
 8000c5c:	17cb      	asrs	r3, r1, #31
 8000c5e:	1ad2      	subs	r2, r2, r3
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	1aca      	subs	r2, r1, r3
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <fsm_manual_run+0x288>)
 8000c6c:	60da      	str	r2, [r3, #12]
			set_LED_Green();
 8000c6e:	f000 f997 	bl	8000fa0 <set_LED_Green>
			set_LED_Green_a();
 8000c72:	f000 f9ed 	bl	8001050 <set_LED_Green_a>
			if (timer1_flag == 1){
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <fsm_manual_run+0x294>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d111      	bne.n	8000ca2 <fsm_manual_run+0x202>
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	482d      	ldr	r0, [pc, #180]	; (8000d38 <fsm_manual_run+0x298>)
 8000c82:	f001 f8e4 	bl	8001e4e <HAL_GPIO_TogglePin>
				setTimer1((4 * 1000000) /((prescaler_blink + 1)*(period_blink + 1)));
 8000c86:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <fsm_manual_run+0x29c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a2c      	ldr	r2, [pc, #176]	; (8000d40 <fsm_manual_run+0x2a0>)
 8000c8e:	6812      	ldr	r2, [r2, #0]
 8000c90:	3201      	adds	r2, #1
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <fsm_manual_run+0x2a4>)
 8000c98:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fb75 	bl	800138c <setTimer1>
			if (timer3_flag == 1){
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <fsm_manual_run+0x2a8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d111      	bne.n	8000cce <fsm_manual_run+0x22e>
				HAL_GPIO_TogglePin(LED_GREEN_A_GPIO_Port, LED_GREEN_A_Pin);
 8000caa:	2108      	movs	r1, #8
 8000cac:	4822      	ldr	r0, [pc, #136]	; (8000d38 <fsm_manual_run+0x298>)
 8000cae:	f001 f8ce 	bl	8001e4e <HAL_GPIO_TogglePin>
				setTimer3((4 * 1000000) /((prescaler_blink + 1)*(period_blink + 1)));
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <fsm_manual_run+0x29c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <fsm_manual_run+0x2a0>)
 8000cba:	6812      	ldr	r2, [r2, #0]
 8000cbc:	3201      	adds	r2, #1
 8000cbe:	fb02 f303 	mul.w	r3, r2, r3
 8000cc2:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <fsm_manual_run+0x2a4>)
 8000cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fb87 	bl	80013dc <setTimer3>
			if (isButton1Pressed() == 1){
 8000cce:	f7ff fa3d 	bl	800014c <isButton1Pressed>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <fsm_manual_run+0x244>
				status = MAN_YELLOW;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <fsm_manual_run+0x280>)
 8000cda:	220e      	movs	r2, #14
 8000cdc:	601a      	str	r2, [r3, #0]
				status_a = MAN_YELLOW;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <fsm_manual_run+0x2ac>)
 8000ce0:	220e      	movs	r2, #14
 8000ce2:	601a      	str	r2, [r3, #0]
			if (isButton2Pressed() == 1){
 8000ce4:	f7ff fa44 	bl	8000170 <isButton2Pressed>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d14b      	bne.n	8000d86 <fsm_manual_run+0x2e6>
				if (duration_green <= 99) duration_green ++;
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b63      	cmp	r3, #99	; 0x63
 8000cf4:	dc05      	bgt.n	8000d02 <fsm_manual_run+0x262>
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e002      	b.n	8000d08 <fsm_manual_run+0x268>
				else duration_green = 1;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
				if (duration_green < 10){
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	dc21      	bgt.n	8000d54 <fsm_manual_run+0x2b4>
					led_buffer[2] = 0;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <fsm_manual_run+0x288>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
					led_buffer[3] = duration_green;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <fsm_manual_run+0x2b0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <fsm_manual_run+0x288>)
 8000d1c:	60d3      	str	r3, [r2, #12]
 8000d1e:	e032      	b.n	8000d86 <fsm_manual_run+0x2e6>
 8000d20:	20000084 	.word	0x20000084
 8000d24:	20000080 	.word	0x20000080
 8000d28:	20000070 	.word	0x20000070
 8000d2c:	20000094 	.word	0x20000094
 8000d30:	66666667 	.word	0x66666667
 8000d34:	200000a4 	.word	0x200000a4
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	2000008c 	.word	0x2000008c
 8000d40:	20000090 	.word	0x20000090
 8000d44:	003d0900 	.word	0x003d0900
 8000d48:	200000b4 	.word	0x200000b4
 8000d4c:	20000088 	.word	0x20000088
 8000d50:	20000098 	.word	0x20000098
					led_buffer[2] = duration_green / 10;
 8000d54:	4b6e      	ldr	r3, [pc, #440]	; (8000f10 <fsm_manual_run+0x470>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a6e      	ldr	r2, [pc, #440]	; (8000f14 <fsm_manual_run+0x474>)
 8000d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5e:	1092      	asrs	r2, r2, #2
 8000d60:	17db      	asrs	r3, r3, #31
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	4a6c      	ldr	r2, [pc, #432]	; (8000f18 <fsm_manual_run+0x478>)
 8000d66:	6093      	str	r3, [r2, #8]
					led_buffer[3] = duration_green % 10;
 8000d68:	4b69      	ldr	r3, [pc, #420]	; (8000f10 <fsm_manual_run+0x470>)
 8000d6a:	6819      	ldr	r1, [r3, #0]
 8000d6c:	4b69      	ldr	r3, [pc, #420]	; (8000f14 <fsm_manual_run+0x474>)
 8000d6e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d72:	109a      	asrs	r2, r3, #2
 8000d74:	17cb      	asrs	r3, r1, #31
 8000d76:	1ad2      	subs	r2, r2, r3
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	1aca      	subs	r2, r1, r3
 8000d82:	4b65      	ldr	r3, [pc, #404]	; (8000f18 <fsm_manual_run+0x478>)
 8000d84:	60da      	str	r2, [r3, #12]
			if (isButton3Pressed() == 1){
 8000d86:	f7ff fa05 	bl	8000194 <isButton3Pressed>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	f040 80ba 	bne.w	8000f06 <fsm_manual_run+0x466>
				status = MAN_YELLOW;
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <fsm_manual_run+0x47c>)
 8000d94:	220e      	movs	r2, #14
 8000d96:	601a      	str	r2, [r3, #0]
				status_a = MAN_YELLOW;
 8000d98:	4b61      	ldr	r3, [pc, #388]	; (8000f20 <fsm_manual_run+0x480>)
 8000d9a:	220e      	movs	r2, #14
 8000d9c:	601a      	str	r2, [r3, #0]
			break;
 8000d9e:	e0b2      	b.n	8000f06 <fsm_manual_run+0x466>
			mode = 4;
 8000da0:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <fsm_manual_run+0x484>)
 8000da2:	2204      	movs	r2, #4
 8000da4:	601a      	str	r2, [r3, #0]
			led_buffer[1] = mode;
 8000da6:	4b5f      	ldr	r3, [pc, #380]	; (8000f24 <fsm_manual_run+0x484>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a5b      	ldr	r2, [pc, #364]	; (8000f18 <fsm_manual_run+0x478>)
 8000dac:	6053      	str	r3, [r2, #4]
			if (duration_yellow < 10){
 8000dae:	4b5e      	ldr	r3, [pc, #376]	; (8000f28 <fsm_manual_run+0x488>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b09      	cmp	r3, #9
 8000db4:	dc07      	bgt.n	8000dc6 <fsm_manual_run+0x326>
				led_buffer[2] = 0;
 8000db6:	4b58      	ldr	r3, [pc, #352]	; (8000f18 <fsm_manual_run+0x478>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
				led_buffer[3] = duration_yellow;
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <fsm_manual_run+0x488>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a55      	ldr	r2, [pc, #340]	; (8000f18 <fsm_manual_run+0x478>)
 8000dc2:	60d3      	str	r3, [r2, #12]
 8000dc4:	e018      	b.n	8000df8 <fsm_manual_run+0x358>
				led_buffer[2] = duration_yellow / 10;
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <fsm_manual_run+0x488>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a52      	ldr	r2, [pc, #328]	; (8000f14 <fsm_manual_run+0x474>)
 8000dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd0:	1092      	asrs	r2, r2, #2
 8000dd2:	17db      	asrs	r3, r3, #31
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <fsm_manual_run+0x478>)
 8000dd8:	6093      	str	r3, [r2, #8]
				led_buffer[3] = duration_yellow % 10;
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <fsm_manual_run+0x488>)
 8000ddc:	6819      	ldr	r1, [r3, #0]
 8000dde:	4b4d      	ldr	r3, [pc, #308]	; (8000f14 <fsm_manual_run+0x474>)
 8000de0:	fb83 2301 	smull	r2, r3, r3, r1
 8000de4:	109a      	asrs	r2, r3, #2
 8000de6:	17cb      	asrs	r3, r1, #31
 8000de8:	1ad2      	subs	r2, r2, r3
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	1aca      	subs	r2, r1, r3
 8000df4:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <fsm_manual_run+0x478>)
 8000df6:	60da      	str	r2, [r3, #12]
			set_LED_Yellow();
 8000df8:	f000 f8e8 	bl	8000fcc <set_LED_Yellow>
			set_LED_Yellow_a();
 8000dfc:	f000 f93e 	bl	800107c <set_LED_Yellow_a>
			if (timer1_flag == 1){
 8000e00:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <fsm_manual_run+0x48c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d111      	bne.n	8000e2c <fsm_manual_run+0x38c>
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	4849      	ldr	r0, [pc, #292]	; (8000f30 <fsm_manual_run+0x490>)
 8000e0c:	f001 f81f 	bl	8001e4e <HAL_GPIO_TogglePin>
				setTimer1((4 * 1000000) /((prescaler_blink + 1)*(period_blink + 1)));
 8000e10:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <fsm_manual_run+0x494>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <fsm_manual_run+0x498>)
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	3201      	adds	r2, #1
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	4a46      	ldr	r2, [pc, #280]	; (8000f3c <fsm_manual_run+0x49c>)
 8000e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fab0 	bl	800138c <setTimer1>
			if (timer3_flag == 1){
 8000e2c:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <fsm_manual_run+0x4a0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d111      	bne.n	8000e58 <fsm_manual_run+0x3b8>
				HAL_GPIO_TogglePin(LED_YELLOW_A_GPIO_Port, LED_YELLOW_A_Pin);
 8000e34:	2104      	movs	r1, #4
 8000e36:	483e      	ldr	r0, [pc, #248]	; (8000f30 <fsm_manual_run+0x490>)
 8000e38:	f001 f809 	bl	8001e4e <HAL_GPIO_TogglePin>
				setTimer3((4 * 1000000) /((prescaler_blink + 1)*(period_blink + 1)));
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <fsm_manual_run+0x494>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a3d      	ldr	r2, [pc, #244]	; (8000f38 <fsm_manual_run+0x498>)
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	3201      	adds	r2, #1
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	4a3b      	ldr	r2, [pc, #236]	; (8000f3c <fsm_manual_run+0x49c>)
 8000e4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fac2 	bl	80013dc <setTimer3>
			if (isButton1Pressed() == 1){
 8000e58:	f7ff f978 	bl	800014c <isButton1Pressed>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10a      	bne.n	8000e78 <fsm_manual_run+0x3d8>
				status = AUTO_RED;
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <fsm_manual_run+0x47c>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	601a      	str	r2, [r3, #0]
				setTimer1(duration_red*100);
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <fsm_manual_run+0x4a4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2264      	movs	r2, #100	; 0x64
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fa8a 	bl	800138c <setTimer1>
			if (isButton2Pressed() == 1){
 8000e78:	f7ff f97a 	bl	8000170 <isButton2Pressed>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d131      	bne.n	8000ee6 <fsm_manual_run+0x446>
				if (duration_yellow <= 99) duration_yellow ++;
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <fsm_manual_run+0x488>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b63      	cmp	r3, #99	; 0x63
 8000e88:	dc05      	bgt.n	8000e96 <fsm_manual_run+0x3f6>
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <fsm_manual_run+0x488>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a25      	ldr	r2, [pc, #148]	; (8000f28 <fsm_manual_run+0x488>)
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	e002      	b.n	8000e9c <fsm_manual_run+0x3fc>
				else duration_yellow = 1;
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <fsm_manual_run+0x488>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
				if (duration_yellow < 10){
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <fsm_manual_run+0x488>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b09      	cmp	r3, #9
 8000ea2:	dc07      	bgt.n	8000eb4 <fsm_manual_run+0x414>
					led_buffer[2] = 0;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <fsm_manual_run+0x478>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
					led_buffer[3] = duration_yellow;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <fsm_manual_run+0x488>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <fsm_manual_run+0x478>)
 8000eb0:	60d3      	str	r3, [r2, #12]
 8000eb2:	e018      	b.n	8000ee6 <fsm_manual_run+0x446>
					led_buffer[2] = duration_yellow / 10;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <fsm_manual_run+0x488>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <fsm_manual_run+0x474>)
 8000eba:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebe:	1092      	asrs	r2, r2, #2
 8000ec0:	17db      	asrs	r3, r3, #31
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <fsm_manual_run+0x478>)
 8000ec6:	6093      	str	r3, [r2, #8]
					led_buffer[3] = duration_yellow % 10;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <fsm_manual_run+0x488>)
 8000eca:	6819      	ldr	r1, [r3, #0]
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <fsm_manual_run+0x474>)
 8000ece:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed2:	109a      	asrs	r2, r3, #2
 8000ed4:	17cb      	asrs	r3, r1, #31
 8000ed6:	1ad2      	subs	r2, r2, r3
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1aca      	subs	r2, r1, r3
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <fsm_manual_run+0x478>)
 8000ee4:	60da      	str	r2, [r3, #12]
			if (isButton3Pressed() == 1){
 8000ee6:	f7ff f955 	bl	8000194 <isButton3Pressed>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d10c      	bne.n	8000f0a <fsm_manual_run+0x46a>
				status = AUTO_RED;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <fsm_manual_run+0x47c>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	601a      	str	r2, [r3, #0]
				status_a = AUTO_RED_a;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <fsm_manual_run+0x480>)
 8000ef8:	2206      	movs	r2, #6
 8000efa:	601a      	str	r2, [r3, #0]
			break;
 8000efc:	e005      	b.n	8000f0a <fsm_manual_run+0x46a>
			break;
 8000efe:	bf00      	nop
 8000f00:	e004      	b.n	8000f0c <fsm_manual_run+0x46c>
			break;
 8000f02:	bf00      	nop
 8000f04:	e002      	b.n	8000f0c <fsm_manual_run+0x46c>
			break;
 8000f06:	bf00      	nop
 8000f08:	e000      	b.n	8000f0c <fsm_manual_run+0x46c>
			break;
 8000f0a:	bf00      	nop
	}
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000098 	.word	0x20000098
 8000f14:	66666667 	.word	0x66666667
 8000f18:	20000070 	.word	0x20000070
 8000f1c:	20000084 	.word	0x20000084
 8000f20:	20000088 	.word	0x20000088
 8000f24:	20000080 	.word	0x20000080
 8000f28:	2000009c 	.word	0x2000009c
 8000f2c:	200000a4 	.word	0x200000a4
 8000f30:	40010800 	.word	0x40010800
 8000f34:	2000008c 	.word	0x2000008c
 8000f38:	20000090 	.word	0x20000090
 8000f3c:	003d0900 	.word	0x003d0900
 8000f40:	200000b4 	.word	0x200000b4
 8000f44:	20000094 	.word	0x20000094

08000f48 <set_LED_Init>:

int duration_red = 0;
int duration_green = 0;
int duration_yellow = 0;

void set_LED_Init(){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2120      	movs	r1, #32
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <set_LED_Init+0x28>)
 8000f52:	f000 ff64 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <set_LED_Init+0x28>)
 8000f5c:	f000 ff5f 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <set_LED_Init+0x28>)
 8000f66:	f000 ff5a 	bl	8001e1e <HAL_GPIO_WritePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40010800 	.word	0x40010800

08000f74 <set_LED_Red>:
//----------------------------------------------------------------------------------
void set_LED_Red(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <set_LED_Red+0x28>)
 8000f7e:	f000 ff4e 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <set_LED_Red+0x28>)
 8000f88:	f000 ff49 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <set_LED_Red+0x28>)
 8000f92:	f000 ff44 	bl	8001e1e <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <set_LED_Green>:

void set_LED_Green(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <set_LED_Green+0x28>)
 8000faa:	f000 ff38 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <set_LED_Green+0x28>)
 8000fb4:	f000 ff33 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2140      	movs	r1, #64	; 0x40
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <set_LED_Green+0x28>)
 8000fbe:	f000 ff2e 	bl	8001e1e <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010800 	.word	0x40010800

08000fcc <set_LED_Yellow>:

void set_LED_Yellow(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <set_LED_Yellow+0x28>)
 8000fd6:	f000 ff22 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <set_LED_Yellow+0x28>)
 8000fe0:	f000 ff1d 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2140      	movs	r1, #64	; 0x40
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <set_LED_Yellow+0x28>)
 8000fea:	f000 ff18 	bl	8001e1e <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <set_LED_Init_a>:
//-----------------------------------------------------------------------------------
void set_LED_Init_a(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_A_GPIO_Port, LED_RED_A_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2102      	movs	r1, #2
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <set_LED_Init_a+0x28>)
 8001002:	f000 ff0c 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_A_GPIO_Port, LED_GREEN_A_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2108      	movs	r1, #8
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <set_LED_Init_a+0x28>)
 800100c:	f000 ff07 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_A_GPIO_Port, LED_YELLOW_A_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2104      	movs	r1, #4
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <set_LED_Init_a+0x28>)
 8001016:	f000 ff02 	bl	8001e1e <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40010800 	.word	0x40010800

08001024 <set_LED_Red_a>:

void set_LED_Red_a(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_A_GPIO_Port, LED_RED_A_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2102      	movs	r1, #2
 800102c:	4807      	ldr	r0, [pc, #28]	; (800104c <set_LED_Red_a+0x28>)
 800102e:	f000 fef6 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_A_GPIO_Port, LED_GREEN_A_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2108      	movs	r1, #8
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <set_LED_Red_a+0x28>)
 8001038:	f000 fef1 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_A_GPIO_Port, LED_YELLOW_A_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2104      	movs	r1, #4
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <set_LED_Red_a+0x28>)
 8001042:	f000 feec 	bl	8001e1e <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40010800 	.word	0x40010800

08001050 <set_LED_Green_a>:

void set_LED_Green_a(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_A_GPIO_Port, LED_RED_A_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2102      	movs	r1, #2
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <set_LED_Green_a+0x28>)
 800105a:	f000 fee0 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_A_GPIO_Port, LED_GREEN_A_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2108      	movs	r1, #8
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <set_LED_Green_a+0x28>)
 8001064:	f000 fedb 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_A_GPIO_Port, LED_YELLOW_A_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2104      	movs	r1, #4
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <set_LED_Green_a+0x28>)
 800106e:	f000 fed6 	bl	8001e1e <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010800 	.word	0x40010800

0800107c <set_LED_Yellow_a>:

void set_LED_Yellow_a(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_A_GPIO_Port, LED_RED_A_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2102      	movs	r1, #2
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <set_LED_Yellow_a+0x28>)
 8001086:	f000 feca 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_A_GPIO_Port, LED_GREEN_A_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2108      	movs	r1, #8
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <set_LED_Yellow_a+0x28>)
 8001090:	f000 fec5 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_A_GPIO_Port, LED_YELLOW_A_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2104      	movs	r1, #4
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <set_LED_Yellow_a+0x28>)
 800109a:	f000 fec0 	bl	8001e1e <HAL_GPIO_WritePin>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40010800 	.word	0x40010800

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fbb5 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f86b 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 f8f1 	bl	800129c <MX_GPIO_Init>
  MX_TIM2_Init();
 80010ba:	f000 f8a3 	bl	8001204 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010be:	4828      	ldr	r0, [pc, #160]	; (8001160 <main+0xb8>)
 80010c0:	f001 fb0a 	bl	80026d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mode = 1;
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <main+0xbc>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
  status = INIT;
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <main+0xc0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
  status_a = INIT_a;
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <main+0xc4>)
 80010d2:	2205      	movs	r2, #5
 80010d4:	601a      	str	r2, [r3, #0]
  setTimer1(50);
 80010d6:	2032      	movs	r0, #50	; 0x32
 80010d8:	f000 f958 	bl	800138c <setTimer1>
  setTimer3(50);
 80010dc:	2032      	movs	r0, #50	; 0x32
 80010de:	f000 f97d 	bl	80013dc <setTimer3>

  int index_led = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  setTimer2(50);
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f000 f964 	bl	80013b4 <setTimer2>

  prescaler_blink = htim2.Init.Prescaler;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <main+0xb8>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <main+0xc8>)
 80010f4:	601a      	str	r2, [r3, #0]
  period_blink = htim2.Init.Period;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <main+0xb8>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <main+0xcc>)
 80010fe:	601a      	str	r2, [r3, #0]

  int led_buffer[4] = {0 , 1 , 0 , 3};
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <main+0xd0>)
 8001102:	1d3c      	adds	r4, r7, #4
 8001104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  duration_red = 5;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <main+0xd4>)
 800110c:	2205      	movs	r2, #5
 800110e:	601a      	str	r2, [r3, #0]
  duration_green = 3;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <main+0xd8>)
 8001112:	2203      	movs	r2, #3
 8001114:	601a      	str	r2, [r3, #0]
  duration_yellow = 2;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <main+0xdc>)
 8001118:	2202      	movs	r2, #2
 800111a:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 800111c:	f7ff fba4 	bl	8000868 <fsm_automatic_run>
	  fsm_automatic_run_a();
 8001120:	f7ff fc30 	bl	8000984 <fsm_automatic_run_a>
	  fsm_manual_run();
 8001124:	f7ff fcbc 	bl	8000aa0 <fsm_manual_run>
	  if (mode == 1){
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <main+0xbc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <main+0x8c>
		  update_mode1();
 8001130:	f000 fa38 	bl	80015a4 <update_mode1>
	  }

	if (timer2_flag == 1){
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <main+0xe0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d1ef      	bne.n	800111c <main+0x74>
		setTimer2(50);
 800113c:	2032      	movs	r0, #50	; 0x32
 800113e:	f000 f939 	bl	80013b4 <setTimer2>
		// TO DO
		update_7seg(index_led);
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff faf2 	bl	800072c <update_7seg>
		if (index_led <= 3){
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b03      	cmp	r3, #3
 800114c:	dce6      	bgt.n	800111c <main+0x74>
			index_led ++;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
			if (index_led > 3){
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2b03      	cmp	r3, #3
 8001158:	dde0      	ble.n	800111c <main+0x74>
				index_led = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
	  fsm_automatic_run();
 800115e:	e7dd      	b.n	800111c <main+0x74>
 8001160:	200000b8 	.word	0x200000b8
 8001164:	20000080 	.word	0x20000080
 8001168:	20000084 	.word	0x20000084
 800116c:	20000088 	.word	0x20000088
 8001170:	2000008c 	.word	0x2000008c
 8001174:	20000090 	.word	0x20000090
 8001178:	08002e78 	.word	0x08002e78
 800117c:	20000094 	.word	0x20000094
 8001180:	20000098 	.word	0x20000098
 8001184:	2000009c 	.word	0x2000009c
 8001188:	200000ac 	.word	0x200000ac

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b090      	sub	sp, #64	; 0x40
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	2228      	movs	r2, #40	; 0x28
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fe58 	bl	8002e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b6:	2310      	movs	r3, #16
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fe5c 	bl	8001e80 <HAL_RCC_OscConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011ce:	f000 f8d7 	bl	8001380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f8c8 	bl	8002380 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f8c3 	bl	8001380 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3740      	adds	r7, #64	; 0x40
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_TIM2_Init+0x94>)
 8001222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001226:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_TIM2_Init+0x94>)
 800122a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800122e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_TIM2_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_TIM2_Init+0x94>)
 8001238:	2209      	movs	r2, #9
 800123a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_TIM2_Init+0x94>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_TIM2_Init+0x94>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <MX_TIM2_Init+0x94>)
 800124a:	f001 f9f5 	bl	8002638 <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001254:	f000 f894 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_TIM2_Init+0x94>)
 8001266:	f001 fb8b 	bl	8002980 <HAL_TIM_ConfigClockSource>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001270:	f000 f886 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_TIM2_Init+0x94>)
 8001282:	f001 fd57 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800128c:	f000 f878 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000b8 	.word	0x200000b8

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_GPIO_Init+0xb8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <MX_GPIO_Init+0xb8>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_GPIO_Init+0xb8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_GPIO_Init+0xb8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <MX_GPIO_Init+0xb8>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_GPIO_Init+0xb8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_A_Pin|LED_YELLOW_A_Pin|LED_GREEN_A_Pin|LED_RED_Pin
 80012e0:	2200      	movs	r2, #0
 80012e2:	21ee      	movs	r1, #238	; 0xee
 80012e4:	481c      	ldr	r0, [pc, #112]	; (8001358 <MX_GPIO_Init+0xbc>)
 80012e6:	f000 fd9a 	bl	8001e1e <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, sega_Pin|segb_Pin|segc_Pin|EN2_Pin
 80012ea:	2200      	movs	r2, #0
 80012ec:	f640 717f 	movw	r1, #3967	; 0xf7f
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <MX_GPIO_Init+0xc0>)
 80012f2:	f000 fd94 	bl	8001e1e <HAL_GPIO_WritePin>
                          |EN3_Pin|segd_Pin|sege_Pin|segf_Pin
                          |segg_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_A_Pin LED_YELLOW_A_Pin LED_GREEN_A_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_A_Pin|LED_YELLOW_A_Pin|LED_GREEN_A_Pin|LED_RED_Pin
 80012f6:	23ee      	movs	r3, #238	; 0xee
 80012f8:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_Pin|LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2302      	movs	r3, #2
 8001304:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4619      	mov	r1, r3
 800130c:	4812      	ldr	r0, [pc, #72]	; (8001358 <MX_GPIO_Init+0xbc>)
 800130e:	f000 fbf5 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : sega_Pin segb_Pin segc_Pin EN2_Pin
                           EN3_Pin segd_Pin sege_Pin segf_Pin
                           segg_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = sega_Pin|segb_Pin|segc_Pin|EN2_Pin
 8001312:	f640 737f 	movw	r3, #3967	; 0xf7f
 8001316:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|segd_Pin|sege_Pin|segf_Pin
                          |segg_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2302      	movs	r3, #2
 8001322:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_GPIO_Init+0xc0>)
 800132c:	f000 fbe6 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001330:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133a:	2301      	movs	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_GPIO_Init+0xbc>)
 8001346:	f000 fbd9 	bl	8001afc <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	40010800 	.word	0x40010800
 800135c:	40010c00 	.word	0x40010c00

08001360 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	getKey1Input();
 8001368:	f7fe ff26 	bl	80001b8 <getKey1Input>
	getKey2Input();
 800136c:	f7fe ff7c 	bl	8000268 <getKey2Input>
	getKey3Input();
 8001370:	f7fe ffd2 	bl	8000318 <getKey3Input>
	timerRun();
 8001374:	f000 f846 	bl	8001404 <timerRun>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <setTimer1>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <setTimer1+0x20>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <setTimer1+0x24>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200000a0 	.word	0x200000a0
 80013b0:	200000a4 	.word	0x200000a4

080013b4 <setTimer2>:

void setTimer2(int duration){
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80013bc:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <setTimer2+0x20>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <setTimer2+0x24>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200000a8 	.word	0x200000a8
 80013d8:	200000ac 	.word	0x200000ac

080013dc <setTimer3>:

void setTimer3(int duration){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <setTimer3+0x20>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <setTimer3+0x24>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	200000b0 	.word	0x200000b0
 8001400:	200000b4 	.word	0x200000b4

08001404 <timerRun>:

void timerRun(){
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <timerRun+0x6c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	dd0b      	ble.n	8001428 <timerRun+0x24>
		timer1_counter --;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <timerRun+0x6c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	4a16      	ldr	r2, [pc, #88]	; (8001470 <timerRun+0x6c>)
 8001418:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <timerRun+0x6c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	dc02      	bgt.n	8001428 <timerRun+0x24>
			timer1_flag = 1;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <timerRun+0x70>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0){
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <timerRun+0x74>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd0b      	ble.n	8001448 <timerRun+0x44>
		timer2_counter --;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <timerRun+0x74>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <timerRun+0x74>)
 8001438:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <timerRun+0x74>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	dc02      	bgt.n	8001448 <timerRun+0x44>
			timer2_flag = 1;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <timerRun+0x78>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer3_counter > 0){
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <timerRun+0x7c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	dd0b      	ble.n	8001468 <timerRun+0x64>
		timer3_counter --;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <timerRun+0x7c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <timerRun+0x7c>)
 8001458:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <timerRun+0x7c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	dc02      	bgt.n	8001468 <timerRun+0x64>
			timer3_flag = 1;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <timerRun+0x80>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	200000a0 	.word	0x200000a0
 8001474:	200000a4 	.word	0x200000a4
 8001478:	200000a8 	.word	0x200000a8
 800147c:	200000ac 	.word	0x200000ac
 8001480:	200000b0 	.word	0x200000b0
 8001484:	200000b4 	.word	0x200000b4

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_MspInit+0x5c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_MspInit+0x5c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_MspInit+0x5c>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_MspInit+0x5c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_MspInit+0x5c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_MspInit+0x5c>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_MspInit+0x60>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_MspInit+0x60>)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000

080014ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014fc:	d113      	bne.n	8001526 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_TIM_Base_MspInit+0x44>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_TIM_Base_MspInit+0x44>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_TIM_Base_MspInit+0x44>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	201c      	movs	r0, #28
 800151c:	f000 fab7 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001520:	201c      	movs	r0, #28
 8001522:	f000 fad0 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157a:	f000 f995 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <TIM2_IRQHandler+0x10>)
 800158a:	f001 f8f1 	bl	8002770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200000b8 	.word	0x200000b8

08001598 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <update_mode1>:
 *      Author: Admin
 */
#include "update_mode1.h"
#include "global.h"

void update_mode1(){
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	if (timer1_flag == 1){
 80015a8:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <update_mode1+0x20c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	f040 80fa 	bne.w	80017a6 <update_mode1+0x202>
		switch (status){
 80015b2:	4b80      	ldr	r3, [pc, #512]	; (80017b4 <update_mode1+0x210>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d052      	beq.n	8001660 <update_mode1+0xbc>
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	dc76      	bgt.n	80016ac <update_mode1+0x108>
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d002      	beq.n	80015c8 <update_mode1+0x24>
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d026      	beq.n	8001614 <update_mode1+0x70>
 80015c6:	e071      	b.n	80016ac <update_mode1+0x108>
			case AUTO_RED:
				if (duration_red < 10){
 80015c8:	4b7b      	ldr	r3, [pc, #492]	; (80017b8 <update_mode1+0x214>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	dc07      	bgt.n	80015e0 <update_mode1+0x3c>
					led_buffer[0] = 0;
 80015d0:	4b7a      	ldr	r3, [pc, #488]	; (80017bc <update_mode1+0x218>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
					led_buffer[1] = duration_red;
 80015d6:	4b78      	ldr	r3, [pc, #480]	; (80017b8 <update_mode1+0x214>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a78      	ldr	r2, [pc, #480]	; (80017bc <update_mode1+0x218>)
 80015dc:	6053      	str	r3, [r2, #4]
				}
				else{
					led_buffer[0] = duration_red / 10;
					led_buffer[1] = duration_red % 10;
				}
				break;
 80015de:	e065      	b.n	80016ac <update_mode1+0x108>
					led_buffer[0] = duration_red / 10;
 80015e0:	4b75      	ldr	r3, [pc, #468]	; (80017b8 <update_mode1+0x214>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a76      	ldr	r2, [pc, #472]	; (80017c0 <update_mode1+0x21c>)
 80015e6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ea:	1092      	asrs	r2, r2, #2
 80015ec:	17db      	asrs	r3, r3, #31
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	4a72      	ldr	r2, [pc, #456]	; (80017bc <update_mode1+0x218>)
 80015f2:	6013      	str	r3, [r2, #0]
					led_buffer[1] = duration_red % 10;
 80015f4:	4b70      	ldr	r3, [pc, #448]	; (80017b8 <update_mode1+0x214>)
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	4b71      	ldr	r3, [pc, #452]	; (80017c0 <update_mode1+0x21c>)
 80015fa:	fb83 2301 	smull	r2, r3, r3, r1
 80015fe:	109a      	asrs	r2, r3, #2
 8001600:	17cb      	asrs	r3, r1, #31
 8001602:	1ad2      	subs	r2, r2, r3
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	1aca      	subs	r2, r1, r3
 800160e:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <update_mode1+0x218>)
 8001610:	605a      	str	r2, [r3, #4]
				break;
 8001612:	e04b      	b.n	80016ac <update_mode1+0x108>

			case AUTO_GREEN:
				if (duration_green < 10){
 8001614:	4b6b      	ldr	r3, [pc, #428]	; (80017c4 <update_mode1+0x220>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b09      	cmp	r3, #9
 800161a:	dc07      	bgt.n	800162c <update_mode1+0x88>
					led_buffer[0] = 0;
 800161c:	4b67      	ldr	r3, [pc, #412]	; (80017bc <update_mode1+0x218>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
					led_buffer[1] = duration_green;
 8001622:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <update_mode1+0x220>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a65      	ldr	r2, [pc, #404]	; (80017bc <update_mode1+0x218>)
 8001628:	6053      	str	r3, [r2, #4]
				}
				else{
					led_buffer[0] = duration_green / 10;
					led_buffer[1] = duration_green % 10;
				}
				break;
 800162a:	e03f      	b.n	80016ac <update_mode1+0x108>
					led_buffer[0] = duration_green / 10;
 800162c:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <update_mode1+0x220>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a63      	ldr	r2, [pc, #396]	; (80017c0 <update_mode1+0x21c>)
 8001632:	fb82 1203 	smull	r1, r2, r2, r3
 8001636:	1092      	asrs	r2, r2, #2
 8001638:	17db      	asrs	r3, r3, #31
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a5f      	ldr	r2, [pc, #380]	; (80017bc <update_mode1+0x218>)
 800163e:	6013      	str	r3, [r2, #0]
					led_buffer[1] = duration_green % 10;
 8001640:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <update_mode1+0x220>)
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <update_mode1+0x21c>)
 8001646:	fb83 2301 	smull	r2, r3, r3, r1
 800164a:	109a      	asrs	r2, r3, #2
 800164c:	17cb      	asrs	r3, r1, #31
 800164e:	1ad2      	subs	r2, r2, r3
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	1aca      	subs	r2, r1, r3
 800165a:	4b58      	ldr	r3, [pc, #352]	; (80017bc <update_mode1+0x218>)
 800165c:	605a      	str	r2, [r3, #4]
				break;
 800165e:	e025      	b.n	80016ac <update_mode1+0x108>

			case AUTO_YELLOW:
				if (duration_yellow < 10){
 8001660:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <update_mode1+0x224>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b09      	cmp	r3, #9
 8001666:	dc07      	bgt.n	8001678 <update_mode1+0xd4>
					led_buffer[0] = 0;
 8001668:	4b54      	ldr	r3, [pc, #336]	; (80017bc <update_mode1+0x218>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
					led_buffer[1] = duration_yellow;
 800166e:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <update_mode1+0x224>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a52      	ldr	r2, [pc, #328]	; (80017bc <update_mode1+0x218>)
 8001674:	6053      	str	r3, [r2, #4]
				}
				else{
					led_buffer[0] = duration_yellow / 10;
					led_buffer[1] = duration_yellow % 10;
				}
				break;
 8001676:	e018      	b.n	80016aa <update_mode1+0x106>
					led_buffer[0] = duration_yellow / 10;
 8001678:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <update_mode1+0x224>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <update_mode1+0x21c>)
 800167e:	fb82 1203 	smull	r1, r2, r2, r3
 8001682:	1092      	asrs	r2, r2, #2
 8001684:	17db      	asrs	r3, r3, #31
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <update_mode1+0x218>)
 800168a:	6013      	str	r3, [r2, #0]
					led_buffer[1] = duration_yellow % 10;
 800168c:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <update_mode1+0x224>)
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <update_mode1+0x21c>)
 8001692:	fb83 2301 	smull	r2, r3, r3, r1
 8001696:	109a      	asrs	r2, r3, #2
 8001698:	17cb      	asrs	r3, r1, #31
 800169a:	1ad2      	subs	r2, r2, r3
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	1aca      	subs	r2, r1, r3
 80016a6:	4b45      	ldr	r3, [pc, #276]	; (80017bc <update_mode1+0x218>)
 80016a8:	605a      	str	r2, [r3, #4]
				break;
 80016aa:	bf00      	nop
		}

		switch (status_a){
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <update_mode1+0x228>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	d006      	beq.n	80016c2 <update_mode1+0x11e>
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	dc77      	bgt.n	80017a8 <update_mode1+0x204>
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d028      	beq.n	800170e <update_mode1+0x16a>
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d04c      	beq.n	800175a <update_mode1+0x1b6>
					led_buffer[3] = duration_yellow % 10;
				}
				break;
		}
    }
}
 80016c0:	e072      	b.n	80017a8 <update_mode1+0x204>
				if (duration_red < 10){
 80016c2:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <update_mode1+0x214>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b09      	cmp	r3, #9
 80016c8:	dc07      	bgt.n	80016da <update_mode1+0x136>
					led_buffer[2] = 0;
 80016ca:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <update_mode1+0x218>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
					led_buffer[3] = duration_red;
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <update_mode1+0x214>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a39      	ldr	r2, [pc, #228]	; (80017bc <update_mode1+0x218>)
 80016d6:	60d3      	str	r3, [r2, #12]
				break;
 80016d8:	e066      	b.n	80017a8 <update_mode1+0x204>
					led_buffer[2] = duration_red / 10;
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <update_mode1+0x214>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a38      	ldr	r2, [pc, #224]	; (80017c0 <update_mode1+0x21c>)
 80016e0:	fb82 1203 	smull	r1, r2, r2, r3
 80016e4:	1092      	asrs	r2, r2, #2
 80016e6:	17db      	asrs	r3, r3, #31
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	4a34      	ldr	r2, [pc, #208]	; (80017bc <update_mode1+0x218>)
 80016ec:	6093      	str	r3, [r2, #8]
					led_buffer[3] = duration_red % 10;
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <update_mode1+0x214>)
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <update_mode1+0x21c>)
 80016f4:	fb83 2301 	smull	r2, r3, r3, r1
 80016f8:	109a      	asrs	r2, r3, #2
 80016fa:	17cb      	asrs	r3, r1, #31
 80016fc:	1ad2      	subs	r2, r2, r3
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	1aca      	subs	r2, r1, r3
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <update_mode1+0x218>)
 800170a:	60da      	str	r2, [r3, #12]
				break;
 800170c:	e04c      	b.n	80017a8 <update_mode1+0x204>
				if (duration_green < 10){
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <update_mode1+0x220>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b09      	cmp	r3, #9
 8001714:	dc07      	bgt.n	8001726 <update_mode1+0x182>
					led_buffer[2] = 0;
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <update_mode1+0x218>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
					led_buffer[3] = duration_green;
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <update_mode1+0x220>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <update_mode1+0x218>)
 8001722:	60d3      	str	r3, [r2, #12]
				break;
 8001724:	e040      	b.n	80017a8 <update_mode1+0x204>
					led_buffer[2] = duration_green / 10;
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <update_mode1+0x220>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <update_mode1+0x21c>)
 800172c:	fb82 1203 	smull	r1, r2, r2, r3
 8001730:	1092      	asrs	r2, r2, #2
 8001732:	17db      	asrs	r3, r3, #31
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <update_mode1+0x218>)
 8001738:	6093      	str	r3, [r2, #8]
					led_buffer[3] = duration_green % 10;
 800173a:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <update_mode1+0x220>)
 800173c:	6819      	ldr	r1, [r3, #0]
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <update_mode1+0x21c>)
 8001740:	fb83 2301 	smull	r2, r3, r3, r1
 8001744:	109a      	asrs	r2, r3, #2
 8001746:	17cb      	asrs	r3, r1, #31
 8001748:	1ad2      	subs	r2, r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	1aca      	subs	r2, r1, r3
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <update_mode1+0x218>)
 8001756:	60da      	str	r2, [r3, #12]
				break;
 8001758:	e026      	b.n	80017a8 <update_mode1+0x204>
				if (duration_yellow < 10){
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <update_mode1+0x224>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b09      	cmp	r3, #9
 8001760:	dc07      	bgt.n	8001772 <update_mode1+0x1ce>
					led_buffer[2] = 0;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <update_mode1+0x218>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
					led_buffer[3] = duration_yellow;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <update_mode1+0x224>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <update_mode1+0x218>)
 800176e:	60d3      	str	r3, [r2, #12]
				break;
 8001770:	e01a      	b.n	80017a8 <update_mode1+0x204>
					led_buffer[2] = duration_yellow / 10;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <update_mode1+0x224>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <update_mode1+0x21c>)
 8001778:	fb82 1203 	smull	r1, r2, r2, r3
 800177c:	1092      	asrs	r2, r2, #2
 800177e:	17db      	asrs	r3, r3, #31
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <update_mode1+0x218>)
 8001784:	6093      	str	r3, [r2, #8]
					led_buffer[3] = duration_yellow % 10;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <update_mode1+0x224>)
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <update_mode1+0x21c>)
 800178c:	fb83 2301 	smull	r2, r3, r3, r1
 8001790:	109a      	asrs	r2, r3, #2
 8001792:	17cb      	asrs	r3, r1, #31
 8001794:	1ad2      	subs	r2, r2, r3
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	1aca      	subs	r2, r1, r3
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <update_mode1+0x218>)
 80017a2:	60da      	str	r2, [r3, #12]
				break;
 80017a4:	e000      	b.n	80017a8 <update_mode1+0x204>
    }
 80017a6:	bf00      	nop
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	200000a4 	.word	0x200000a4
 80017b4:	20000084 	.word	0x20000084
 80017b8:	20000094 	.word	0x20000094
 80017bc:	20000070 	.word	0x20000070
 80017c0:	66666667 	.word	0x66666667
 80017c4:	20000098 	.word	0x20000098
 80017c8:	2000009c 	.word	0x2000009c
 80017cc:	20000088 	.word	0x20000088

080017d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d0:	f7ff fee2 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017d6:	490c      	ldr	r1, [pc, #48]	; (8001808 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <LoopFillZerobss+0x16>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017ec:	4c09      	ldr	r4, [pc, #36]	; (8001814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fa:	f001 fb05 	bl	8002e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017fe:	f7ff fc53 	bl	80010a8 <main>
  bx lr
 8001802:	4770      	bx	lr
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800180c:	08002eb4 	.word	0x08002eb4
  ldr r2, =_sbss
 8001810:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001814:	20000104 	.word	0x20000104

08001818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC1_2_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_Init+0x28>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_Init+0x28>)
 8001826:	f043 0310 	orr.w	r3, r3, #16
 800182a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 f923 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	200f      	movs	r0, #15
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fe26 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f93b 	bl	8001ae2 <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 f903 	bl	8001a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000003c 	.word	0x2000003c
 80018a0:	20000044 	.word	0x20000044
 80018a4:	20000040 	.word	0x20000040

080018a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_IncTick+0x1c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_IncTick+0x20>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <HAL_IncTick+0x20>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	20000044 	.word	0x20000044
 80018c8:	20000100 	.word	0x20000100

080018cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b02      	ldr	r3, [pc, #8]	; (80018dc <HAL_GetTick+0x10>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000100 	.word	0x20000100

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4906      	ldr	r1, [pc, #24]	; (8001978 <__NVIC_EnableIRQ+0x34>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff90 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff2d 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff42 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff90 	bl	80019d0 <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5f 	bl	800197c <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff35 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffa2 	bl	8001a34 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b08b      	sub	sp, #44	; 0x2c
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	e148      	b.n	8001da2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b10:	2201      	movs	r2, #1
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8137 	bne.w	8001d9c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4aa3      	ldr	r2, [pc, #652]	; (8001dc0 <HAL_GPIO_Init+0x2c4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d05e      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b38:	4aa1      	ldr	r2, [pc, #644]	; (8001dc0 <HAL_GPIO_Init+0x2c4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d875      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b3e:	4aa1      	ldr	r2, [pc, #644]	; (8001dc4 <HAL_GPIO_Init+0x2c8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d058      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b44:	4a9f      	ldr	r2, [pc, #636]	; (8001dc4 <HAL_GPIO_Init+0x2c8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d86f      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b4a:	4a9f      	ldr	r2, [pc, #636]	; (8001dc8 <HAL_GPIO_Init+0x2cc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d052      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b50:	4a9d      	ldr	r2, [pc, #628]	; (8001dc8 <HAL_GPIO_Init+0x2cc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d869      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b56:	4a9d      	ldr	r2, [pc, #628]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d04c      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b5c:	4a9b      	ldr	r2, [pc, #620]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d863      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b62:	4a9b      	ldr	r2, [pc, #620]	; (8001dd0 <HAL_GPIO_Init+0x2d4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d046      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b68:	4a99      	ldr	r2, [pc, #612]	; (8001dd0 <HAL_GPIO_Init+0x2d4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d85d      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d82a      	bhi.n	8001bc8 <HAL_GPIO_Init+0xcc>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d859      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <HAL_GPIO_Init+0x80>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001bf7 	.word	0x08001bf7
 8001b80:	08001bd1 	.word	0x08001bd1
 8001b84:	08001be3 	.word	0x08001be3
 8001b88:	08001c25 	.word	0x08001c25
 8001b8c:	08001c2b 	.word	0x08001c2b
 8001b90:	08001c2b 	.word	0x08001c2b
 8001b94:	08001c2b 	.word	0x08001c2b
 8001b98:	08001c2b 	.word	0x08001c2b
 8001b9c:	08001c2b 	.word	0x08001c2b
 8001ba0:	08001c2b 	.word	0x08001c2b
 8001ba4:	08001c2b 	.word	0x08001c2b
 8001ba8:	08001c2b 	.word	0x08001c2b
 8001bac:	08001c2b 	.word	0x08001c2b
 8001bb0:	08001c2b 	.word	0x08001c2b
 8001bb4:	08001c2b 	.word	0x08001c2b
 8001bb8:	08001c2b 	.word	0x08001c2b
 8001bbc:	08001c2b 	.word	0x08001c2b
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001bed 	.word	0x08001bed
 8001bc8:	4a82      	ldr	r2, [pc, #520]	; (8001dd4 <HAL_GPIO_Init+0x2d8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bce:	e02c      	b.n	8001c2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e029      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e024      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	3308      	adds	r3, #8
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e01f      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e01a      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e013      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	611a      	str	r2, [r3, #16]
          break;
 8001c16:	e009      	b.n	8001c2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	615a      	str	r2, [r3, #20]
          break;
 8001c22:	e003      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          break;
 8001c2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d801      	bhi.n	8001c36 <HAL_GPIO_Init+0x13a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	e001      	b.n	8001c3a <HAL_GPIO_Init+0x13e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2bff      	cmp	r3, #255	; 0xff
 8001c40:	d802      	bhi.n	8001c48 <HAL_GPIO_Init+0x14c>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x152>
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3b08      	subs	r3, #8
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	210f      	movs	r1, #15
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	6a39      	ldr	r1, [r7, #32]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8090 	beq.w	8001d9c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7c:	4b56      	ldr	r3, [pc, #344]	; (8001dd8 <HAL_GPIO_Init+0x2dc>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a55      	ldr	r2, [pc, #340]	; (8001dd8 <HAL_GPIO_Init+0x2dc>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_GPIO_Init+0x2dc>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c94:	4a51      	ldr	r2, [pc, #324]	; (8001ddc <HAL_GPIO_Init+0x2e0>)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_GPIO_Init+0x2e4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00d      	beq.n	8001cdc <HAL_GPIO_Init+0x1e0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a48      	ldr	r2, [pc, #288]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d007      	beq.n	8001cd8 <HAL_GPIO_Init+0x1dc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a47      	ldr	r2, [pc, #284]	; (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_GPIO_Init+0x1d8>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e004      	b.n	8001cde <HAL_GPIO_Init+0x1e2>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x1e2>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_GPIO_Init+0x1e2>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce0:	f002 0203 	and.w	r2, r2, #3
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cee:	493b      	ldr	r1, [pc, #236]	; (8001ddc <HAL_GPIO_Init+0x2e0>)
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4937      	ldr	r1, [pc, #220]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4933      	ldr	r1, [pc, #204]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	492d      	ldr	r1, [pc, #180]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4929      	ldr	r1, [pc, #164]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4923      	ldr	r1, [pc, #140]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	491f      	ldr	r1, [pc, #124]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4919      	ldr	r1, [pc, #100]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4915      	ldr	r1, [pc, #84]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	3301      	adds	r3, #1
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f47f aeaf 	bne.w	8001b10 <HAL_GPIO_Init+0x14>
  }
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	372c      	adds	r7, #44	; 0x2c
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	10320000 	.word	0x10320000
 8001dc4:	10310000 	.word	0x10310000
 8001dc8:	10220000 	.word	0x10220000
 8001dcc:	10210000 	.word	0x10210000
 8001dd0:	10120000 	.word	0x10120000
 8001dd4:	10110000 	.word	0x10110000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e2e:	787b      	ldrb	r3, [r7, #1]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e60:	887a      	ldrh	r2, [r7, #2]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	400b      	ands	r3, r1
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e26c      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8087 	beq.w	8001fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea0:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eac:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d112      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
 8001eb8:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d10b      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d06c      	beq.n	8001fac <HAL_RCC_OscConfig+0x12c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d168      	bne.n	8001fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e246      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x76>
 8001ee8:	4b80      	ldr	r3, [pc, #512]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7f      	ldr	r2, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e02e      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b7b      	ldr	r3, [pc, #492]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7a      	ldr	r2, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b78      	ldr	r3, [pc, #480]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a77      	ldr	r2, [pc, #476]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0xbc>
 8001f22:	4b72      	ldr	r3, [pc, #456]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a71      	ldr	r2, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fcb6 	bl	80018cc <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fcb2 	bl	80018cc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1fa      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe4>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fca2 	bl	80018cc <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fc9e 	bl	80018cc <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1e6      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x10c>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1ba      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4939      	ldr	r1, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff fc57 	bl	80018cc <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002022:	f7ff fc53 	bl	80018cc <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e19b      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4927      	ldr	r1, [pc, #156]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fc36 	bl	80018cc <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff fc32 	bl	80018cc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e17a      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03a      	beq.n	8002104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d019      	beq.n	80020ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7ff fc16 	bl	80018cc <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7ff fc12 	bl	80018cc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e15a      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f000 fa9a 	bl	80025fc <RCC_Delay>
 80020c8:	e01c      	b.n	8002104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff fbfc 	bl	80018cc <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fbf8 	bl	80018cc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d908      	bls.n	80020f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e140      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	42420000 	.word	0x42420000
 80020f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b9e      	ldr	r3, [pc, #632]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e9      	bne.n	80020d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a6 	beq.w	800225e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002116:	4b97      	ldr	r3, [pc, #604]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b94      	ldr	r3, [pc, #592]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a93      	ldr	r2, [pc, #588]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b91      	ldr	r3, [pc, #580]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b8e      	ldr	r3, [pc, #568]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b8b      	ldr	r3, [pc, #556]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a8a      	ldr	r2, [pc, #552]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff fbb9 	bl	80018cc <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff fbb5 	bl	80018cc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0fd      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b81      	ldr	r3, [pc, #516]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x312>
 8002184:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a7a      	ldr	r2, [pc, #488]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e02d      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x334>
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a75      	ldr	r2, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a72      	ldr	r2, [pc, #456]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	e01c      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d10c      	bne.n	80021d6 <HAL_RCC_OscConfig+0x356>
 80021bc:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a6c      	ldr	r2, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a69      	ldr	r2, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	e00b      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a66      	ldr	r2, [pc, #408]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b64      	ldr	r3, [pc, #400]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a63      	ldr	r2, [pc, #396]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d015      	beq.n	8002222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fb69 	bl	80018cc <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff fb65 	bl	80018cc <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0ab      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	4b57      	ldr	r3, [pc, #348]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ee      	beq.n	80021fe <HAL_RCC_OscConfig+0x37e>
 8002220:	e014      	b.n	800224c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7ff fb53 	bl	80018cc <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7ff fb4f 	bl	80018cc <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e095      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b48      	ldr	r3, [pc, #288]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a47      	ldr	r2, [pc, #284]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8081 	beq.w	800236a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b08      	cmp	r3, #8
 8002272:	d061      	beq.n	8002338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d146      	bne.n	800230a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fb23 	bl	80018cc <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff fb1f 	bl	80018cc <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e067      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	492d      	ldr	r1, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a19      	ldr	r1, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	430b      	orrs	r3, r1
 80022d6:	4927      	ldr	r1, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff faf3 	bl	80018cc <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff faef 	bl	80018cc <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e037      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x46a>
 8002308:	e02f      	b.n	800236a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fadc 	bl	80018cc <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7ff fad8 	bl	80018cc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e020      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x498>
 8002336:	e018      	b.n	800236a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e013      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	429a      	cmp	r2, r3
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	42420060 	.word	0x42420060

08002380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0d0      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002394:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d910      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 0207 	bic.w	r2, r3, #7
 80023aa:	4965      	ldr	r1, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d040      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d115      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e073      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06b      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f023 0203 	bic.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4936      	ldr	r1, [pc, #216]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002470:	f7ff fa2c 	bl	80018cc <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e00a      	b.n	800248e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7ff fa28 	bl	80018cc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e053      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 020c 	and.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d1eb      	bne.n	8002478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d210      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4922      	ldr	r1, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1cc>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1d0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f98a 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000
 8002544:	40021000 	.word	0x40021000
 8002548:	08002e88 	.word	0x08002e88
 800254c:	2000003c 	.word	0x2000003c
 8002550:	20000040 	.word	0x20000040

08002554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d002      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x30>
 800257e:	2b08      	cmp	r3, #8
 8002580:	d003      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x36>
 8002582:	e027      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002586:	613b      	str	r3, [r7, #16]
      break;
 8002588:	e027      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0c9b      	lsrs	r3, r3, #18
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d010      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0c5b      	lsrs	r3, r3, #17
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 80025b6:	fb02 f203 	mul.w	r2, r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e004      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	613b      	str	r3, [r7, #16]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 80025d6:	613b      	str	r3, [r7, #16]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	693b      	ldr	r3, [r7, #16]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	08002e98 	.word	0x08002e98
 80025f4:	08002ea8 	.word	0x08002ea8
 80025f8:	003d0900 	.word	0x003d0900

080025fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <RCC_Delay+0x34>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <RCC_Delay+0x38>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0a5b      	lsrs	r3, r3, #9
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002618:	bf00      	nop
  }
  while (Delay --);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e5a      	subs	r2, r3, #1
 800261e:	60fa      	str	r2, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f9      	bne.n	8002618 <RCC_Delay+0x1c>
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	2000003c 	.word	0x2000003c
 8002634:	10624dd3 	.word	0x10624dd3

08002638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e041      	b.n	80026ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe ff44 	bl	80014ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3304      	adds	r3, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f000 fa6e 	bl	8002b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e035      	b.n	800275c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a16      	ldr	r2, [pc, #88]	; (8002768 <HAL_TIM_Base_Start_IT+0x90>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_TIM_Base_Start_IT+0x4e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d004      	beq.n	8002726 <HAL_TIM_Base_Start_IT+0x4e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_TIM_Base_Start_IT+0x94>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b06      	cmp	r3, #6
 8002736:	d010      	beq.n	800275a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	e007      	b.n	800275a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40000400 	.word	0x40000400

08002770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d122      	bne.n	80027cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0202 	mvn.w	r2, #2
 800279c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f9b4 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9a7 	bl	8002b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f9b6 	bl	8002b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d122      	bne.n	8002820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d11b      	bne.n	8002820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0204 	mvn.w	r2, #4
 80027f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f98a 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f97d 	bl	8002b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f98c 	bl	8002b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b08      	cmp	r3, #8
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b08      	cmp	r3, #8
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0208 	mvn.w	r2, #8
 8002844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2204      	movs	r2, #4
 800284a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f960 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f953 	bl	8002b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f962 	bl	8002b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b10      	cmp	r3, #16
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b10      	cmp	r3, #16
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0210 	mvn.w	r2, #16
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2208      	movs	r2, #8
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f936 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f929 	bl	8002b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f938 	bl	8002b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0201 	mvn.w	r2, #1
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fd36 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b80      	cmp	r3, #128	; 0x80
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fa6b 	bl	8002df6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8fc 	bl	8002b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b20      	cmp	r3, #32
 8002958:	d10e      	bne.n	8002978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b20      	cmp	r3, #32
 8002966:	d107      	bne.n	8002978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0220 	mvn.w	r2, #32
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa36 	bl	8002de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_TIM_ConfigClockSource+0x1c>
 8002998:	2302      	movs	r3, #2
 800299a:	e0b4      	b.n	8002b06 <HAL_TIM_ConfigClockSource+0x186>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d4:	d03e      	beq.n	8002a54 <HAL_TIM_ConfigClockSource+0xd4>
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	f200 8087 	bhi.w	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 80029de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e2:	f000 8086 	beq.w	8002af2 <HAL_TIM_ConfigClockSource+0x172>
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d87f      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b70      	cmp	r3, #112	; 0x70
 80029ee:	d01a      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0xa6>
 80029f0:	2b70      	cmp	r3, #112	; 0x70
 80029f2:	d87b      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 80029f4:	2b60      	cmp	r3, #96	; 0x60
 80029f6:	d050      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0x11a>
 80029f8:	2b60      	cmp	r3, #96	; 0x60
 80029fa:	d877      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 80029fc:	2b50      	cmp	r3, #80	; 0x50
 80029fe:	d03c      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0xfa>
 8002a00:	2b50      	cmp	r3, #80	; 0x50
 8002a02:	d873      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d058      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x13a>
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d86f      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 8002a0c:	2b30      	cmp	r3, #48	; 0x30
 8002a0e:	d064      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x15a>
 8002a10:	2b30      	cmp	r3, #48	; 0x30
 8002a12:	d86b      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d060      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x15a>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d867      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d05c      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x15a>
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d05a      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	e062      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f000 f95e 	bl	8002cf6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	609a      	str	r2, [r3, #8]
      break;
 8002a52:	e04f      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f000 f947 	bl	8002cf6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a76:	609a      	str	r2, [r3, #8]
      break;
 8002a78:	e03c      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f000 f8be 	bl	8002c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2150      	movs	r1, #80	; 0x50
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f915 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002a98:	e02c      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 f8dc 	bl	8002c64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2160      	movs	r1, #96	; 0x60
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f905 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e01c      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f000 f89e 	bl	8002c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2140      	movs	r1, #64	; 0x40
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f8f5 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002ad8:	e00c      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f000 f8ec 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002aea:	e003      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e000      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
	...

08002b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <TIM_Base_SetConfig+0xa8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d007      	beq.n	8002b80 <TIM_Base_SetConfig+0x28>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d003      	beq.n	8002b80 <TIM_Base_SetConfig+0x28>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <TIM_Base_SetConfig+0xac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d108      	bne.n	8002b92 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <TIM_Base_SetConfig+0xa8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <TIM_Base_SetConfig+0x52>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d003      	beq.n	8002baa <TIM_Base_SetConfig+0x52>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <TIM_Base_SetConfig+0xac>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d108      	bne.n	8002bbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <TIM_Base_SetConfig+0xa8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d103      	bne.n	8002bf0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	615a      	str	r2, [r3, #20]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40000400 	.word	0x40000400

08002c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0201 	bic.w	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 030a 	bic.w	r3, r3, #10
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0210 	bic.w	r2, r3, #16
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	031b      	lsls	r3, r3, #12
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f043 0307 	orr.w	r3, r3, #7
 8002ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b087      	sub	sp, #28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	021a      	lsls	r2, r3, #8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	609a      	str	r2, [r3, #8]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e041      	b.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d004      	beq.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10c      	bne.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400

08002de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <__libc_init_array>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	4d0c      	ldr	r5, [pc, #48]	; (8002e40 <__libc_init_array+0x38>)
 8002e0e:	4c0d      	ldr	r4, [pc, #52]	; (8002e44 <__libc_init_array+0x3c>)
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	42a6      	cmp	r6, r4
 8002e16:	d109      	bne.n	8002e2c <__libc_init_array+0x24>
 8002e18:	f000 f822 	bl	8002e60 <_init>
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	4d0a      	ldr	r5, [pc, #40]	; (8002e48 <__libc_init_array+0x40>)
 8002e20:	4c0a      	ldr	r4, [pc, #40]	; (8002e4c <__libc_init_array+0x44>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	42a6      	cmp	r6, r4
 8002e28:	d105      	bne.n	8002e36 <__libc_init_array+0x2e>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e30:	4798      	blx	r3
 8002e32:	3601      	adds	r6, #1
 8002e34:	e7ee      	b.n	8002e14 <__libc_init_array+0xc>
 8002e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3a:	4798      	blx	r3
 8002e3c:	3601      	adds	r6, #1
 8002e3e:	e7f2      	b.n	8002e26 <__libc_init_array+0x1e>
 8002e40:	08002eac 	.word	0x08002eac
 8002e44:	08002eac 	.word	0x08002eac
 8002e48:	08002eac 	.word	0x08002eac
 8002e4c:	08002eb0 	.word	0x08002eb0

08002e50 <memset>:
 8002e50:	4603      	mov	r3, r0
 8002e52:	4402      	add	r2, r0
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d100      	bne.n	8002e5a <memset+0xa>
 8002e58:	4770      	bx	lr
 8002e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5e:	e7f9      	b.n	8002e54 <memset+0x4>

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
